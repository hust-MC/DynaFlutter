import 'dart:math';
import 'dart:ui';

import 'package:dyna_flutter/dyna/param_utils.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';

import '../../dyna_builder/utils/string_utils.dart';

// 从源码中获取的默认值
const Duration _snackBarDisplayDuration = Duration(milliseconds: 4000);
const double kMinInteractiveDimensionCupertino = 44.0;
const int defaultRowsPerPage = 10;
const double _kOffset = 40.0; // distance to bottom of banner, at a 45 degree angle inwards
const double _kHeight = 12.0; // height of banner
// offset plus sqrt(2)/2 * banner height

const Color _kColor = Color(0xA0B71C1C);
const TextStyle _kTextStyle = TextStyle(
  color: Color(0xFFFFFFFF),
  fontSize: _kHeight * 0.85,
  fontWeight: FontWeight.w900,
  height: 1.0,
);
int _kDefaultSemanticIndexCallback(Widget _, int localIndex) => localIndex; 
const double kMiddleSpacing = 16.0;

Map<String, Object Function(Params)> widgetMap = {
  'Text': (Params params) => Text(params.posParam[0]),
  'Column': (Params params) =>
      Column(children: ParamUtils.listAs<Widget>(params.nameParam['children'])),
  'Image': (Params params) => Image(image: params.posParam[0]),
  'Scaffold': (Params params) =>
      Scaffold(appBar: params.nameParam['appBar'], body: params.nameParam['body'], floatingActionButton: params.nameParam['floatingActionButton']),
  'AppBar': (Params params) => AppBar(title: params.nameParam['title']),
  'Center': (Params params) => Center(child: params.nameParam['child']),
  'Icon': (Params params) => Icon(params.posParam[0]),
  'AboutDialog': (Params params) => AboutDialog(
    key: params.nameParam['key'],
    applicationName: params.nameParam['applicationName'],
    applicationVersion: params.nameParam['applicationVersion'],
    applicationIcon: params.nameParam['applicationIcon'],
    applicationLegalese: params.nameParam['applicationLegalese'],
    children: as<Widget>(params.nameParam['children']),
  ),
  'AboutListTile': (Params params) => AboutListTile(
    key: params.nameParam['key'],
    icon: params.nameParam['icon'],
    child: params.nameParam['child'],
    applicationName: params.nameParam['applicationName'],
    applicationVersion: params.nameParam['applicationVersion'],
    applicationIcon: params.nameParam['applicationIcon'],
    applicationLegalese: params.nameParam['applicationLegalese'],
    aboutBoxChildren: as<Widget>(params.nameParam['aboutBoxChildren']),
    dense: params.nameParam['dense'],
  ),
  'LicensePage': (Params params) => LicensePage(
    key: params.nameParam['key'],
    applicationName: params.nameParam['applicationName'],
    applicationVersion: params.nameParam['applicationVersion'],
    applicationIcon: params.nameParam['applicationIcon'],
    applicationLegalese: params.nameParam['applicationLegalese'],
  ),
  'ActionChip': (Params params) => ActionChip(
    key: params.nameParam['key'],
    avatar: params.nameParam['avatar'],
    label: params.nameParam['label'],
    labelStyle: params.nameParam['labelStyle'],
    labelPadding: params.nameParam['labelPadding'],
    onPressed: params.nameParam['onPressed'],
    pressElevation: params.nameParam['pressElevation']?.toDouble(),
    tooltip: params.nameParam['tooltip'],
    shape: params.nameParam['shape'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    backgroundColor: params.nameParam['backgroundColor'],
    padding: params.nameParam['padding'],
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    elevation: params.nameParam['elevation']?.toDouble(),
    shadowColor: params.nameParam['shadowColor'],
  ),
  'Chip': (Params params) => Chip(
    key: params.nameParam['key'],
    avatar: params.nameParam['avatar'],
    label: params.nameParam['label'],
    labelStyle: params.nameParam['labelStyle'],
    labelPadding: params.nameParam['labelPadding'],
    deleteIcon: params.nameParam['deleteIcon'],
    onDeleted: params.nameParam['onDeleted'],
    deleteIconColor: params.nameParam['deleteIconColor'],
    deleteButtonTooltipMessage: params.nameParam['deleteButtonTooltipMessage'],
    shape: params.nameParam['shape'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    backgroundColor: params.nameParam['backgroundColor'],
    padding: params.nameParam['padding'],
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    elevation: params.nameParam['elevation']?.toDouble(),
    shadowColor: params.nameParam['shadowColor'],
  ),
  'ChoiceChip': (Params params) => ChoiceChip(
    key: params.nameParam['key'],
    avatar: params.nameParam['avatar'],
    label: params.nameParam['label'],
    labelStyle: params.nameParam['labelStyle'],
    labelPadding: params.nameParam['labelPadding'],
    onSelected: params.nameParam['onSelected'],
    pressElevation: params.nameParam['pressElevation']?.toDouble(),
    selected: params.nameParam['selected'],
    selectedColor: params.nameParam['selectedColor'],
    disabledColor: params.nameParam['disabledColor'],
    tooltip: params.nameParam['tooltip'],
    shape: params.nameParam['shape'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    backgroundColor: params.nameParam['backgroundColor'],
    padding: params.nameParam['padding'],
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    elevation: params.nameParam['elevation']?.toDouble(),
    shadowColor: params.nameParam['shadowColor'],
    selectedShadowColor: params.nameParam['selectedShadowColor'],
    avatarBorder: params.nameParam['avatarBorder'] ?? const CircleBorder(),
  ),
  'FilterChip': (Params params) => FilterChip(
    key: params.nameParam['key'],
    avatar: params.nameParam['avatar'],
    label: params.nameParam['label'],
    labelStyle: params.nameParam['labelStyle'],
    labelPadding: params.nameParam['labelPadding'],
    selected: params.nameParam['selected'] ?? false,
    onSelected: params.nameParam['onSelected'],
    pressElevation: params.nameParam['pressElevation']?.toDouble(),
    disabledColor: params.nameParam['disabledColor'],
    selectedColor: params.nameParam['selectedColor'],
    tooltip: params.nameParam['tooltip'],
    shape: params.nameParam['shape'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    backgroundColor: params.nameParam['backgroundColor'],
    padding: params.nameParam['padding'],
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    elevation: params.nameParam['elevation']?.toDouble(),
    shadowColor: params.nameParam['shadowColor'],
    selectedShadowColor: params.nameParam['selectedShadowColor'],
    showCheckmark: params.nameParam['showCheckmark'],
    checkmarkColor: params.nameParam['checkmarkColor'],
    avatarBorder: params.nameParam['avatarBorder'] ?? const CircleBorder(),
  ),
  'InputChip': (Params params) => InputChip(
    key: params.nameParam['key'],
    avatar: params.nameParam['avatar'],
    label: params.nameParam['label'],
    labelStyle: params.nameParam['labelStyle'],
    labelPadding: params.nameParam['labelPadding'],
    selected: params.nameParam['selected'] ?? false,
    isEnabled: params.nameParam['isEnabled'] ?? true,
    onSelected: params.nameParam['onSelected'],
    deleteIcon: params.nameParam['deleteIcon'],
    onDeleted: params.nameParam['onDeleted'],
    deleteIconColor: params.nameParam['deleteIconColor'],
    deleteButtonTooltipMessage: params.nameParam['deleteButtonTooltipMessage'],
    onPressed: params.nameParam['onPressed'],
    pressElevation: params.nameParam['pressElevation']?.toDouble(),
    disabledColor: params.nameParam['disabledColor'],
    selectedColor: params.nameParam['selectedColor'],
    tooltip: params.nameParam['tooltip'],
    shape: params.nameParam['shape'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    backgroundColor: params.nameParam['backgroundColor'],
    padding: params.nameParam['padding'],
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    elevation: params.nameParam['elevation']?.toDouble(),
    shadowColor: params.nameParam['shadowColor'],
    selectedShadowColor: params.nameParam['selectedShadowColor'],
    showCheckmark: params.nameParam['showCheckmark'],
    checkmarkColor: params.nameParam['checkmarkColor'],
    avatarBorder: params.nameParam['avatarBorder'] ?? const CircleBorder(),
  ),
  'RawChip': (Params params) => RawChip(
    key: params.nameParam['key'],
    avatar: params.nameParam['avatar'],
    label: params.nameParam['label'],
    labelStyle: params.nameParam['labelStyle'],
    padding: params.nameParam['padding'],
    labelPadding: params.nameParam['labelPadding'],
    deleteIcon: params.nameParam['deleteIcon'],
    onDeleted: params.nameParam['onDeleted'],
    deleteIconColor: params.nameParam['deleteIconColor'],
    deleteButtonTooltipMessage: params.nameParam['deleteButtonTooltipMessage'],
    onPressed: params.nameParam['onPressed'],
    onSelected: params.nameParam['onSelected'],
    pressElevation: params.nameParam['pressElevation']?.toDouble(),
    tapEnabled: params.nameParam['tapEnabled'] ?? true,
    selected: params.nameParam['selected'] ?? false,
    isEnabled: params.nameParam['isEnabled'] ?? true,
    disabledColor: params.nameParam['disabledColor'],
    selectedColor: params.nameParam['selectedColor'],
    tooltip: params.nameParam['tooltip'],
    shape: params.nameParam['shape'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    backgroundColor: params.nameParam['backgroundColor'],
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    elevation: params.nameParam['elevation']?.toDouble(),
    shadowColor: params.nameParam['shadowColor'],
    selectedShadowColor: params.nameParam['selectedShadowColor'],
    showCheckmark: params.nameParam['showCheckmark'] ?? true,
    checkmarkColor: params.nameParam['checkmarkColor'],
    avatarBorder: params.nameParam['avatarBorder'] ?? const CircleBorder(),
  ),
  'AlertDialog': (Params params) => AlertDialog(
    key: params.nameParam['key'],
    title: params.nameParam['title'],
    titlePadding: params.nameParam['titlePadding'],
    titleTextStyle: params.nameParam['titleTextStyle'],
    content: params.nameParam['content'],
    contentPadding: params.nameParam['contentPadding'] ??
        const EdgeInsets.fromLTRB(24.0, 20.0, 24.0, 24.0),
    contentTextStyle: params.nameParam['contentTextStyle'],
    actions: as<Widget>(params.nameParam['actions']),
    backgroundColor: params.nameParam['backgroundColor'],
    elevation: params.nameParam['elevation']?.toDouble(),
    semanticLabel: params.nameParam['semanticLabel'],
    shape: params.nameParam['shape'],
  ),
  'Dialog': (Params params) => Dialog(
    key: params.nameParam['key'],
    backgroundColor: params.nameParam['backgroundColor'],
    elevation: params.nameParam['elevation']?.toDouble(),
    insetAnimationDuration: params.nameParam['insetAnimationDuration'] ??
        const Duration(milliseconds: 100),
    insetAnimationCurve:
    params.nameParam['insetAnimationCurve'] ?? Curves.decelerate,
    shape: params.nameParam['shape'],
    child: params.nameParam['child'],
  ),
  'SimpleDialog': (Params params) => SimpleDialog(
    key: params.nameParam['key'],
    title: params.nameParam['title'],
    titlePadding: params.nameParam['titlePadding'] ??
        const EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0),
    children: as<Widget>(params.nameParam['children']),
    contentPadding: params.nameParam['contentPadding'] ??
        const EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0),
    backgroundColor: params.nameParam['backgroundColor'],
    elevation: params.nameParam['elevation']?.toDouble(),
    semanticLabel: params.nameParam['semanticLabel'],
    shape: params.nameParam['shape'],
  ),
  'SimpleDialogOption': (Params params) => SimpleDialogOption(
    key: params.nameParam['key'],
    onPressed: params.nameParam['onPressed'],
    child: params.nameParam['child'],
  ),
  'AnimatedIcon': (Params params) => AnimatedIcon(
    key: params.nameParam['key'],
    icon: params.nameParam['icon'],
    progress: params.nameParam['progress'],
    color: params.nameParam['color'],
    size: params.nameParam['size']?.toDouble(),
    semanticLabel: params.nameParam['semanticLabel'],
    textDirection: params.nameParam['textDirection'],
  ),
  'AppBar': (Params params) => AppBar(
    key: params.nameParam['key'],
    leading: params.nameParam['leading'],
    automaticallyImplyLeading:
    params.nameParam['automaticallyImplyLeading'] ?? true,
    title: params.nameParam['title'],
    actions: as<Widget>(params.nameParam['actions']),
    flexibleSpace: params.nameParam['flexibleSpace'],
    bottom: params.nameParam['bottom'],
    elevation: params.nameParam['elevation']?.toDouble(),
    shape: params.nameParam['shape'],
    backgroundColor: params.nameParam['backgroundColor'],
    brightness: params.nameParam['brightness'],
    iconTheme: params.nameParam['iconTheme'],
    actionsIconTheme: params.nameParam['actionsIconTheme'],
    textTheme: params.nameParam['textTheme'],
    primary: params.nameParam['primary'] ?? true,
    centerTitle: params.nameParam['centerTitle'],
    titleSpacing: params.nameParam['titleSpacing']?.toDouble() ??
        NavigationToolbar.kMiddleSpacing,
    toolbarOpacity: params.nameParam['toolbarOpacity']?.toDouble() ?? 1.0,
    bottomOpacity: params.nameParam['bottomOpacity']?.toDouble() ?? 1.0,
  ),
  'SliverAppBar': (Params params) => SliverAppBar(
    key: params.nameParam['key'],
    leading: params.nameParam['leading'],
    automaticallyImplyLeading:
    params.nameParam['automaticallyImplyLeading'] ?? true,
    title: params.nameParam['title'],
    actions: as<Widget>(params.nameParam['actions']),
    flexibleSpace: params.nameParam['flexibleSpace'],
    bottom: params.nameParam['bottom'],
    elevation: params.nameParam['elevation']?.toDouble(),
    forceElevated: params.nameParam['forceElevated'] ?? false,
    backgroundColor: params.nameParam['backgroundColor'],
    brightness: params.nameParam['brightness'],
    iconTheme: params.nameParam['iconTheme'],
    actionsIconTheme: params.nameParam['actionsIconTheme'],
    textTheme: params.nameParam['textTheme'],
    primary: params.nameParam['primary'] ?? true,
    centerTitle: params.nameParam['centerTitle'],
    titleSpacing: params.nameParam['titleSpacing']?.toDouble() ??
        NavigationToolbar.kMiddleSpacing,
    expandedHeight: params.nameParam['expandedHeight']?.toDouble(),
    floating: params.nameParam['floating'] ?? false,
    pinned: params.nameParam['pinned'] ?? false,
    snap: params.nameParam['snap'] ?? false,
    stretch: params.nameParam['stretch'] ?? false,
    stretchTriggerOffset:
    params.nameParam['stretchTriggerOffset']?.toDouble() ?? 100.0,
    onStretchTrigger: params.nameParam['onStretchTrigger'],
    shape: params.nameParam['shape'],
  ),
  'BackButton': (Params params) => BackButton(
    key: params.nameParam['key'],
    color: params.nameParam['color'],
    onPressed: params.nameParam['onPressed'],
  ),
  'BackButtonIcon': (Params params) => BackButtonIcon(
    key: params.nameParam['key'],
  ),
  'CloseButton': (Params params) => CloseButton(
    key: params.nameParam['key'],
  ),
  'BottomAppBar': (Params params) => BottomAppBar(
    key: params.nameParam['key'],
    color: params.nameParam['color'],
    elevation: params.nameParam['elevation']?.toDouble(),
    shape: params.nameParam['shape'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    notchMargin: params.nameParam['notchMargin']?.toDouble() ?? 4.0,
    child: params.nameParam['child'],
  ),
  'BottomNavigationBar': (Params params) => BottomNavigationBar(
    key: params.nameParam['key'],
    items: as<BottomNavigationBarItem>(params.nameParam['items']),
    onTap: params.nameParam['onTap'],
    currentIndex: params.nameParam['currentIndex'] ?? 0,
    elevation: params.nameParam['elevation']?.toDouble() ?? 8.0,
    type: params.nameParam['type'],
    fixedColor: params.nameParam['fixedColor'],
    backgroundColor: params.nameParam['backgroundColor'],
    iconSize: params.nameParam['iconSize']?.toDouble() ?? 24.0,
    selectedItemColor: params.nameParam['selectedItemColor'],
    unselectedItemColor: params.nameParam['unselectedItemColor'],
    selectedIconTheme:
    params.nameParam['selectedIconTheme'] ?? const IconThemeData(),
    unselectedIconTheme:
    params.nameParam['unselectedIconTheme'] ?? const IconThemeData(),
    selectedFontSize: params.nameParam['selectedFontSize']?.toDouble() ?? 14.0,
    unselectedFontSize: params.nameParam['unselectedFontSize']?.toDouble() ?? 12.0,
    selectedLabelStyle: params.nameParam['selectedLabelStyle'],
    unselectedLabelStyle: params.nameParam['unselectedLabelStyle'],
    showSelectedLabels: params.nameParam['showSelectedLabels'] ?? true,
    showUnselectedLabels: params.nameParam['showUnselectedLabels'],
  ),
  'BottomSheet': (Params params) => BottomSheet(
    key: params.nameParam['key'],
    animationController: params.nameParam['animationController'],
    enableDrag: params.nameParam['enableDrag'] ?? true,
    backgroundColor: params.nameParam['backgroundColor'],
    elevation: params.nameParam['elevation']?.toDouble(),
    shape: params.nameParam['shape'],
    clipBehavior: params.nameParam['clipBehavior'],
    onClosing: params.nameParam['onClosing'],
    builder: params.nameParam['builder'],
  ),
  'ButtonBar': (Params params) => ButtonBar(
    key: params.nameParam['key'],
    alignment: params.nameParam['alignment'],
    mainAxisSize: params.nameParam['mainAxisSize'],
    buttonTextTheme: params.nameParam['buttonTextTheme'],
    buttonMinWidth: params.nameParam['buttonMinWidth']?.toDouble(),
    buttonHeight: params.nameParam['buttonHeight']?.toDouble(),
    buttonPadding: params.nameParam['buttonPadding'],
    buttonAlignedDropdown: params.nameParam['buttonAlignedDropdown'],
    layoutBehavior: params.nameParam['layoutBehavior'],
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'Card': (Params params) => Card(
    key: params.nameParam['key'],
    color: params.nameParam['color'],
    elevation: params.nameParam['elevation']?.toDouble(),
    shape: params.nameParam['shape'],
    borderOnForeground: params.nameParam['borderOnForeground'] ?? true,
    margin: params.nameParam['margin'],
    clipBehavior: params.nameParam['clipBehavior'],
    child: params.nameParam['child'],
    semanticContainer: params.nameParam['semanticContainer'] ?? true,
  ),
  'Checkbox': (Params params) => Checkbox(
    key: params.nameParam['key'],
    value: params.nameParam['value'],
    tristate: params.nameParam['tristate'] ?? false,
    onChanged: params.nameParam['onChanged'],
    activeColor: params.nameParam['activeColor'],
    checkColor: params.nameParam['checkColor'],
    focusColor: params.nameParam['focusColor'],
    hoverColor: params.nameParam['hoverColor'],
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
  ),
  'CheckboxListTile': (Params params) => CheckboxListTile(
    key: params.nameParam['key'],
    value: params.nameParam['value'],
    onChanged: params.nameParam['onChanged'],
    activeColor: params.nameParam['activeColor'],
    checkColor: params.nameParam['checkColor'],
    title: params.nameParam['title'],
    subtitle: params.nameParam['subtitle'],
    isThreeLine: params.nameParam['isThreeLine'] ?? false,
    dense: params.nameParam['dense'],
    secondary: params.nameParam['secondary'],
    selected: params.nameParam['selected'] ?? false,
    controlAffinity:
    params.nameParam['controlAffinity'] ?? ListTileControlAffinity.platform,
  ),
  'CircleAvatar': (Params params) => CircleAvatar(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    backgroundColor: params.nameParam['backgroundColor'],
    backgroundImage: params.nameParam['backgroundImage'],
    foregroundColor: params.nameParam['foregroundColor'],
    radius: params.nameParam['radius']?.toDouble(),
    minRadius: params.nameParam['minRadius']?.toDouble(),
    maxRadius: params.nameParam['maxRadius']?.toDouble(),
  ),

  'FlexibleSpaceBar': (Params params) => FlexibleSpaceBar(
    key: params.nameParam['key'],
    title: params.nameParam['title'],
    background: params.nameParam['background'],
    centerTitle: params.nameParam['centerTitle'],
    titlePadding: params.nameParam['titlePadding'],
    collapseMode: params.nameParam['collapseMode'] ?? CollapseMode.parallax,
    stretchModes: params.nameParam['stretchModes'] ??
        const <StretchMode>[StretchMode.zoomBackground],
  ),
  'DataTable': (Params params) => DataTable(
    key: params.nameParam['key'],
    columns: as<DataColumn>(params.nameParam['columns']),
    sortColumnIndex: params.nameParam['sortColumnIndex'],
    sortAscending: params.nameParam['sortAscending'] ?? true,
    onSelectAll: params.nameParam['onSelectAll'],
    dataRowHeight:
    params.nameParam['dataRowHeight']?.toDouble() ?? kMinInteractiveDimension,
    headingRowHeight: params.nameParam['headingRowHeight']?.toDouble() ?? 56.0,
    horizontalMargin: params.nameParam['horizontalMargin']?.toDouble() ?? 24.0,
    columnSpacing: params.nameParam['columnSpacing']?.toDouble() ?? 56.0,
    rows: as<DataRow>(params.nameParam['rows']),
  ),
  'YearPicker': (Params params) => YearPicker(
    key: params.nameParam['key'],
    selectedDate: params.nameParam['selectedDate'],
    onChanged: params.nameParam['onChanged'],
    firstDate: params.nameParam['firstDate'],
    lastDate: params.nameParam['lastDate'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'DefaultTabController': (Params params) => DefaultTabController(
    key: params.nameParam['key'],
    length: params.nameParam['length'],
    initialIndex: params.nameParam['initialIndex'] ?? 0,
    child: params.nameParam['child'],
  ),
  'Divider': (Params params) => Divider(
    key: params.nameParam['key'],
    height: params.nameParam['height']?.toDouble(),
    thickness: params.nameParam['thickness']?.toDouble(),
    indent: params.nameParam['indent']?.toDouble(),
    endIndent: params.nameParam['endIndent']?.toDouble(),
    color: params.nameParam['color'],
  ),
  'VerticalDivider': (Params params) => VerticalDivider(
    key: params.nameParam['key'],
    width: params.nameParam['width']?.toDouble(),
    thickness: params.nameParam['thickness']?.toDouble(),
    indent: params.nameParam['indent']?.toDouble(),
    endIndent: params.nameParam['endIndent']?.toDouble(),
    color: params.nameParam['color'],
  ),
  'Drawer': (Params params) => Drawer(
    key: params.nameParam['key'],
    elevation: params.nameParam['elevation']?.toDouble() ?? 16.0,
    child: params.nameParam['child'],
    semanticLabel: params.nameParam['semanticLabel'],
  ),

  'DrawerController': (Params params) => DrawerController(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    alignment: params.nameParam['alignment'],
    drawerCallback: params.nameParam['drawerCallback'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
    scrimColor: params.nameParam['scrimColor'],
    edgeDragWidth: params.nameParam['edgeDragWidth']?.toDouble(),
  ),
  'DrawerHeader': (Params params) => DrawerHeader(
    key: params.nameParam['key'],
    decoration: params.nameParam['decoration'],
    margin: params.nameParam['margin'] ?? const EdgeInsets.only(bottom: 8.0),
    padding: params.nameParam['padding'] ??
        const EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 8.0),
    duration: params.nameParam['duration'] ?? const Duration(milliseconds: 250),
    curve: params.nameParam['curve'] ?? Curves.fastOutSlowIn,
    child: params.nameParam['child'],
  ),
  'DropdownButton': (Params params) => DropdownButton(
    key: params.nameParam['key'],
    items: as<DropdownMenuItem>(params.nameParam['items']),
    selectedItemBuilder: params.nameParam['selectedItemBuilder'],
    value: params.nameParam['value'],
    hint: params.nameParam['hint'],
    disabledHint: params.nameParam['disabledHint'],
    onChanged: params.nameParam['onChanged'],
    elevation: params.nameParam['elevation'] ?? 8,
    style: params.nameParam['style'],
    underline: params.nameParam['underline'],
    icon: params.nameParam['icon'],
    iconDisabledColor: params.nameParam['iconDisabledColor'],
    iconEnabledColor: params.nameParam['iconEnabledColor'],
    iconSize: params.nameParam['iconSize']?.toDouble() ?? 24.0,
    isDense: params.nameParam['isDense'] ?? false,
    isExpanded: params.nameParam['isExpanded'] ?? false,
    itemHeight:
    params.nameParam['itemHeight']?.toDouble() ?? kMinInteractiveDimension,
    focusColor: params.nameParam['focusColor'],
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
  ),
  'ExpandIcon': (Params params) => ExpandIcon(
    key: params.nameParam['key'],
    isExpanded: params.nameParam['isExpanded'] ?? false,
    size: params.nameParam['size']?.toDouble() ?? 24.0,
    onPressed: params.nameParam['onPressed'],
    padding: params.nameParam['padding'] ?? const EdgeInsets.all(8.0),
    color: params.nameParam['color'],
    disabledColor: params.nameParam['disabledColor'],
    expandedColor: params.nameParam['expandedColor'],
  ),
  'ExpansionPanel': (Params params) => ExpansionPanel(
    headerBuilder: params.nameParam['headerBuilder'],
    body: params.nameParam['body'],
    isExpanded: params.nameParam['isExpanded'] ?? false,
    canTapOnHeader: params.nameParam['canTapOnHeader'] ?? false,
  ),
  'ExpansionPanelList': (Params params) => ExpansionPanelList(
    key: params.nameParam['key'],
    children: params.nameParam['children'] ?? const <ExpansionPanel>[],
    expansionCallback: params.nameParam['expansionCallback'],
    animationDuration:
    params.nameParam['animationDuration'] ?? kThemeAnimationDuration,
  ),
  'ExpansionPanelList.radio': (Params params) => ExpansionPanelList.radio(
    key: params.nameParam['key'],
    children: params.nameParam['children'] ?? const <ExpansionPanelRadio>[],
    expansionCallback: params.nameParam['expansionCallback'],
    animationDuration:
    params.nameParam['animationDuration'] ?? kThemeAnimationDuration,
    initialOpenPanelValue: params.nameParam['initialOpenPanelValue'],
  ),
  'ExpansionPanelRadio': (Params params) => ExpansionPanelRadio(
    value: params.nameParam['value'],
    headerBuilder: params.nameParam['headerBuilder'],
    body: params.nameParam['body'],
    canTapOnHeader: params.nameParam['canTapOnHeader'] ?? false,
  ),
  'ExpansionTile': (Params params) => ExpansionTile(
    key: params.nameParam['key'],
    leading: params.nameParam['leading'],
    title: params.nameParam['title'],
    subtitle: params.nameParam['subtitle'],
    backgroundColor: params.nameParam['backgroundColor'],
    onExpansionChanged: params.nameParam['onExpansionChanged'],
    children: params.nameParam['children'] ?? const <Widget>[],
    trailing: params.nameParam['trailing'],
    initiallyExpanded: params.nameParam['initiallyExpanded'] ?? false,
  ),

  'FloatingActionButton': (Params params) {
    print("MCLOG====onPressed: ${params.nameParam['onPressed']}");

    print("MCLOG====onPressed: ${params.nameParam['onPressed'].runtimeType}");

    return FloatingActionButton(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    tooltip: params.nameParam['tooltip'],
    foregroundColor: params.nameParam['foregroundColor'],
    backgroundColor: params.nameParam['backgroundColor'],
    focusColor: params.nameParam['focusColor'],
    hoverColor: params.nameParam['hoverColor'],
    splashColor: params.nameParam['splashColor'],
    elevation: params.nameParam['elevation']?.toDouble(),
    focusElevation: params.nameParam['focusElevation']?.toDouble(),
    hoverElevation: params.nameParam['hoverElevation']?.toDouble(),
    highlightElevation: params.nameParam['highlightElevation']?.toDouble(),
    disabledElevation: params.nameParam['disabledElevation']?.toDouble(),
    onPressed: params.nameParam['onPressed'],
    mini: params.nameParam['mini'] ?? false,
    shape: params.nameParam['shape'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    isExtended: params.nameParam['isExtended'] ?? false,
  );},
  'FloatingActionButton.extended': (Params params) => FloatingActionButton.extended(
    key: params.nameParam['key'],
    tooltip: params.nameParam['tooltip'],
    foregroundColor: params.nameParam['foregroundColor'],
    backgroundColor: params.nameParam['backgroundColor'],
    focusColor: params.nameParam['focusColor'],
    hoverColor: params.nameParam['hoverColor'],
    elevation: params.nameParam['elevation']?.toDouble(),
    focusElevation: params.nameParam['focusElevation']?.toDouble(),
    hoverElevation: params.nameParam['hoverElevation']?.toDouble(),
    splashColor: params.nameParam['splashColor'],
    highlightElevation: params.nameParam['highlightElevation']?.toDouble(),
    disabledElevation: params.nameParam['disabledElevation']?.toDouble(),
    onPressed: params.nameParam['onPressed'],
    shape: params.nameParam['shape'],
    isExtended: params.nameParam['isExtended'] ?? true,
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    icon: params.nameParam['icon'],
    label: params.nameParam['label'],
  ),
  'FlutterLogo': (Params params) => FlutterLogo(
    key: params.nameParam['key'],
    size: params.nameParam['size']?.toDouble(),
    textColor: params.nameParam['textColor'] ?? const Color(0xFF616161),
    style: params.nameParam['style'] ?? FlutterLogoStyle.markOnly,
    duration: params.nameParam['duration'] ?? const Duration(milliseconds: 750),
    curve: params.nameParam['curve'] ?? Curves.fastOutSlowIn,
  ),
  'GridTile': (Params params) => GridTile(
    key: params.nameParam['key'],
    header: params.nameParam['header'],
    footer: params.nameParam['footer'],
    child: params.nameParam['child'],
  ),
  'GridTileBar': (Params params) => GridTileBar(
    key: params.nameParam['key'],
    backgroundColor: params.nameParam['backgroundColor'],
    leading: params.nameParam['leading'],
    title: params.nameParam['title'],
    subtitle: params.nameParam['subtitle'],
    trailing: params.nameParam['trailing'],
  ),
  'IconButton': (Params params) => IconButton(
    key: params.nameParam['key'],
    iconSize: params.nameParam['iconSize']?.toDouble() ?? 24.0,
    padding: params.nameParam['padding'] ?? const EdgeInsets.all(8.0),
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    icon: params.nameParam['icon'],
    color: params.nameParam['color'],
    focusColor: params.nameParam['focusColor'],
    hoverColor: params.nameParam['hoverColor'],
    highlightColor: params.nameParam['highlightColor'],
    splashColor: params.nameParam['splashColor'],
    disabledColor: params.nameParam['disabledColor'],
    onPressed: params.nameParam['onPressed'],
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    tooltip: params.nameParam['tooltip'],
    enableFeedback: params.nameParam['enableFeedback'] ?? true,
  ),
  'Ink': (Params params) => Ink(
    key: params.nameParam['key'],
    padding: params.nameParam['padding'],
    color: params.nameParam['color'],
    decoration: params.nameParam['decoration'],
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'Ink.image': (Params params) => Ink.image(
    key: params.nameParam['key'],
    padding: params.nameParam['padding'],
    image: params.nameParam['image'],
    colorFilter: params.nameParam['colorFilter'],
    fit: params.nameParam['fit'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    centerSlice: params.nameParam['centerSlice'],
    repeat: params.nameParam['repeat'] ?? ImageRepeat.noRepeat,
    matchTextDirection: params.nameParam['matchTextDirection'] ?? false,
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'InkResponse': (Params params) => InkResponse(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    onTap: params.nameParam['onTap'],
    onTapDown: params.nameParam['onTapDown'],
    onTapCancel: params.nameParam['onTapCancel'],
    onDoubleTap: params.nameParam['onDoubleTap'],
    onLongPress: params.nameParam['onLongPress'],
    onHighlightChanged: params.nameParam['onHighlightChanged'],
    onHover: params.nameParam['onHover'],
    containedInkWell: params.nameParam['containedInkWell'] ?? false,
    highlightShape: params.nameParam['highlightShape'] ?? BoxShape.circle,
    radius: params.nameParam['radius']?.toDouble(),
    borderRadius: params.nameParam['borderRadius'],
    customBorder: params.nameParam['customBorder'],
    focusColor: params.nameParam['focusColor'],
    hoverColor: params.nameParam['hoverColor'],
    highlightColor: params.nameParam['highlightColor'],
    splashColor: params.nameParam['splashColor'],
    splashFactory: params.nameParam['splashFactory'],
    enableFeedback: params.nameParam['enableFeedback'] ?? true,
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    focusNode: params.nameParam['focusNode'],
    canRequestFocus: params.nameParam['canRequestFocus'] ?? true,
    onFocusChange: params.nameParam['onFocusChange'],
    autofocus: params.nameParam['autofocus'] ?? false,
  ),
  'InputDecorator': (Params params) => InputDecorator(
    key: params.nameParam['key'],
    decoration: params.nameParam['decoration'],
    baseStyle: params.nameParam['baseStyle'],
    textAlign: params.nameParam['textAlign'],
    textAlignVertical: params.nameParam['textAlignVertical'],
    isFocused: params.nameParam['isFocused'] ?? false,
    isHovering: params.nameParam['isHovering'] ?? false,
    expands: params.nameParam['expands'] ?? false,
    isEmpty: params.nameParam['isEmpty'] ?? false,
    child: params.nameParam['child'],
  ),
  'ListTile': (Params params) => ListTile(
    key: params.nameParam['key'],
    leading: params.nameParam['leading'],
    title: params.nameParam['title'],
    subtitle: params.nameParam['subtitle'],
    trailing: params.nameParam['trailing'],
    isThreeLine: params.nameParam['isThreeLine'] ?? false,
    dense: params.nameParam['dense'],
    contentPadding: params.nameParam['contentPadding'],
    enabled: params.nameParam['enabled'] ?? true,
    onTap: params.nameParam['onTap'],
    onLongPress: params.nameParam['onLongPress'],
    selected: params.nameParam['selected'] ?? false,
  ),

  'Material': (Params params) => Material(
    key: params.nameParam['key'],
    type: params.nameParam['type'] ?? MaterialType.canvas,
    elevation: params.nameParam['elevation']?.toDouble() ?? 0.0,
    color: params.nameParam['color'],
    shadowColor: params.nameParam['shadowColor'] ?? const Color(0xFF000000),
    textStyle: params.nameParam['textStyle'],
    borderRadius: params.nameParam['borderRadius'],
    shape: params.nameParam['shape'],
    borderOnForeground: params.nameParam['borderOnForeground'] ?? true,
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    animationDuration:
    params.nameParam['animationDuration'] ?? kThemeChangeDuration,
    child: params.nameParam['child'],
  ),
  'MaterialApp': (Params params) => MaterialApp(
    key: params.nameParam['key'],
    navigatorKey: params.nameParam['navigatorKey'],
    home: params.nameParam['home'],
    routes: params.nameParam['routes'] ?? const <String, WidgetBuilder>{},
    initialRoute: params.nameParam['initialRoute'],
    onGenerateRoute: params.nameParam['onGenerateRoute'],
    onUnknownRoute: params.nameParam['onUnknownRoute'],
    navigatorObservers:
    params.nameParam['navigatorObservers'] ?? const <NavigatorObserver>[],
    builder: params.nameParam['builder'],
    title: params.nameParam['title'] ?? '',
    onGenerateTitle: params.nameParam['onGenerateTitle'],
    color: params.nameParam['color'],
    theme: params.nameParam['theme'],
    darkTheme: params.nameParam['darkTheme'],
    themeMode: params.nameParam['themeMode'] ?? ThemeMode.system,
    locale: params.nameParam['locale'],
    localizationsDelegates: params.nameParam['localizationsDelegates'],
    localeListResolutionCallback: params.nameParam['localeListResolutionCallback'],
    localeResolutionCallback: params.nameParam['localeResolutionCallback'],
    supportedLocales:
    params.nameParam['supportedLocales'] ?? const <Locale>[Locale('en', 'US')],
    debugShowMaterialGrid: params.nameParam['debugShowMaterialGrid'] ?? false,
    showPerformanceOverlay: params.nameParam['showPerformanceOverlay'] ?? false,
    checkerboardRasterCacheImages:
    params.nameParam['checkerboardRasterCacheImages'] ?? false,
    checkerboardOffscreenLayers:
    params.nameParam['checkerboardOffscreenLayers'] ?? false,
    showSemanticsDebugger: params.nameParam['showSemanticsDebugger'] ?? false,
    debugShowCheckedModeBanner:
    params.nameParam['debugShowCheckedModeBanner'] ?? true,
  ),
  'MaterialBanner': (Params params) => MaterialBanner(
    key: params.nameParam['key'],
    content: params.nameParam['content'],
    contentTextStyle: params.nameParam['contentTextStyle'],
    actions: as<Widget>(params.nameParam['actions']),
    leading: params.nameParam['leading'],
    backgroundColor: params.nameParam['backgroundColor'],
    padding: params.nameParam['padding'],
    leadingPadding: params.nameParam['leadingPadding'],
    forceActionsBelow: params.nameParam['forceActionsBelow'] ?? false,
  ),
  'MaterialButton': (Params params) => MaterialButton(
    key: params.nameParam['key'],
    onPressed: params.nameParam['onPressed'],
    onLongPress: params.nameParam['onLongPress'],
    onHighlightChanged: params.nameParam['onHighlightChanged'],
    textTheme: params.nameParam['textTheme'],
    textColor: params.nameParam['textColor'],
    disabledTextColor: params.nameParam['disabledTextColor'],
    color: params.nameParam['color'],
    disabledColor: params.nameParam['disabledColor'],
    focusColor: params.nameParam['focusColor'],
    hoverColor: params.nameParam['hoverColor'],
    highlightColor: params.nameParam['highlightColor'],
    splashColor: params.nameParam['splashColor'],
    colorBrightness: params.nameParam['colorBrightness'],
    elevation: params.nameParam['elevation']?.toDouble(),
    focusElevation: params.nameParam['focusElevation']?.toDouble(),
    hoverElevation: params.nameParam['hoverElevation']?.toDouble(),
    highlightElevation: params.nameParam['highlightElevation']?.toDouble(),
    disabledElevation: params.nameParam['disabledElevation']?.toDouble(),
    padding: params.nameParam['padding'],
    shape: params.nameParam['shape'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    animationDuration: params.nameParam['animationDuration'],
    minWidth: params.nameParam['minWidth']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    enableFeedback: params.nameParam['enableFeedback'] ?? true,
    child: params.nameParam['child'],
  ),
  'MergeableMaterial': (Params params) => MergeableMaterial(
    key: params.nameParam['key'],
    mainAxis: params.nameParam['mainAxis'] ?? Axis.vertical,
    elevation: params.nameParam['elevation'] ?? 2,
    hasDividers: params.nameParam['hasDividers'] ?? false,
    children: params.nameParam['children'] ?? const <MergeableMaterialItem>[],
  ),
  'PaginatedDataTable': (Params params) => PaginatedDataTable(
    key: params.nameParam['key'],
    header: params.nameParam['header'],
    actions: as<Widget>(params.nameParam['actions']),
    columns: as<DataColumn>(params.nameParam['columns']),
    sortColumnIndex: params.nameParam['sortColumnIndex'],
    sortAscending: params.nameParam['sortAscending'] ?? true,
    onSelectAll: params.nameParam['onSelectAll'],
    dataRowHeight:
    params.nameParam['dataRowHeight']?.toDouble() ?? kMinInteractiveDimension,
    headingRowHeight: params.nameParam['headingRowHeight']?.toDouble() ?? 56.0,
    horizontalMargin: params.nameParam['horizontalMargin']?.toDouble() ?? 24.0,
    columnSpacing: params.nameParam['columnSpacing']?.toDouble() ?? 56.0,
    initialFirstRowIndex: params.nameParam['initialFirstRowIndex'] ?? 0,
    onPageChanged: params.nameParam['onPageChanged'],
    rowsPerPage: params.nameParam['rowsPerPage'] ?? defaultRowsPerPage,
    availableRowsPerPage: params.nameParam['availableRowsPerPage'] ??
        <int>[
          defaultRowsPerPage,
          defaultRowsPerPage * 2,
          defaultRowsPerPage * 5,
          defaultRowsPerPage * 10
        ],
    onRowsPerPageChanged: params.nameParam['onRowsPerPageChanged'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
    source: params.nameParam['source'],
  ),
  'PopupMenuButton': (Params params) => PopupMenuButton(
    key: params.nameParam['key'],
    itemBuilder: params.nameParam['itemBuilder'],
    initialValue: params.nameParam['initialValue'],
    onSelected: params.nameParam['onSelected'],
    onCanceled: params.nameParam['onCanceled'],
    tooltip: params.nameParam['tooltip'],
    elevation: params.nameParam['elevation']?.toDouble(),
    padding: params.nameParam['padding'] ?? const EdgeInsets.all(8.0),
    child: params.nameParam['child'],
    icon: params.nameParam['icon'],
    offset: params.nameParam['offset'] ?? Offset.zero,
    enabled: params.nameParam['enabled'] ?? true,
    shape: params.nameParam['shape'],
    color: params.nameParam['color'],
  ),
  'Radio': (Params params) => Radio(
    key: params.nameParam['key'],
    value: params.nameParam['value'],
    groupValue: params.nameParam['groupValue'],
    onChanged: params.nameParam['onChanged'],
    activeColor: params.nameParam['activeColor'],
    focusColor: params.nameParam['focusColor'],
    hoverColor: params.nameParam['hoverColor'],
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
  ),
  'RadioListTile': (Params params) => RadioListTile(
    key: params.nameParam['key'],
    value: params.nameParam['value'],
    groupValue: params.nameParam['groupValue'],
    onChanged: params.nameParam['onChanged'],
    activeColor: params.nameParam['activeColor'],
    title: params.nameParam['title'],
    subtitle: params.nameParam['subtitle'],
    isThreeLine: params.nameParam['isThreeLine'] ?? false,
    dense: params.nameParam['dense'],
    secondary: params.nameParam['secondary'],
    selected: params.nameParam['selected'] ?? false,
    controlAffinity:
    params.nameParam['controlAffinity'] ?? ListTileControlAffinity.platform,
  ),
  'RangeSlider': (Params params) => RangeSlider(
    key: params.nameParam['key'],
    values: params.nameParam['values'],
    onChanged: params.nameParam['onChanged'],
    onChangeStart: params.nameParam['onChangeStart'],
    onChangeEnd: params.nameParam['onChangeEnd'],
    min: params.nameParam['min']?.toDouble() ?? 0.0,
    max: params.nameParam['max']?.toDouble() ?? 1.0,
    divisions: params.nameParam['divisions'],
    labels: params.nameParam['labels'],
    activeColor: params.nameParam['activeColor'],
    inactiveColor: params.nameParam['inactiveColor'],
    semanticFormatterCallback: params.nameParam['semanticFormatterCallback'],
  ),
  'RawMaterialButton': (Params params) => RawMaterialButton(
    key: params.nameParam['key'],
    onPressed: params.nameParam['onPressed'],
    onLongPress: params.nameParam['onLongPress'],
    onHighlightChanged: params.nameParam['onHighlightChanged'],
    textStyle: params.nameParam['textStyle'],
    fillColor: params.nameParam['fillColor'],
    focusColor: params.nameParam['focusColor'],
    hoverColor: params.nameParam['hoverColor'],
    highlightColor: params.nameParam['highlightColor'],
    splashColor: params.nameParam['splashColor'],
    elevation: params.nameParam['elevation']?.toDouble() ?? 2.0,
    focusElevation: params.nameParam['focusElevation']?.toDouble() ?? 4.0,
    hoverElevation: params.nameParam['hoverElevation']?.toDouble() ?? 4.0,
    highlightElevation: params.nameParam['highlightElevation']?.toDouble() ?? 8.0,
    disabledElevation: params.nameParam['disabledElevation']?.toDouble() ?? 0.0,
    padding: params.nameParam['padding'] ?? EdgeInsets.zero,
    constraints: params.nameParam['constraints'] ??
        const BoxConstraints(minWidth: 88.0, minHeight: 36.0),
    shape: params.nameParam['shape'] ?? const RoundedRectangleBorder(),
    animationDuration:
    params.nameParam['animationDuration'] ?? kThemeChangeDuration,
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    child: params.nameParam['child'],
    enableFeedback: params.nameParam['enableFeedback'] ?? true,
  ),
  'RefreshIndicator': (Params params) => RefreshIndicator(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    displacement: params.nameParam['displacement']?.toDouble() ?? 40.0,
    onRefresh: params.nameParam['onRefresh'],
    color: params.nameParam['color'],
    backgroundColor: params.nameParam['backgroundColor'],
    notificationPredicate: params.nameParam['notificationPredicate'] ??
        defaultScrollNotificationPredicate,
    semanticsLabel: params.nameParam['semanticsLabel'],
    semanticsValue: params.nameParam['semanticsValue'],
  ),
  'ReorderableListView': (Params params) => ReorderableListView(
    header: params.nameParam['header'],
    children: as<Widget>(params.nameParam['children']),
    onReorder: params.nameParam['onReorder'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    padding: params.nameParam['padding'],
    reverse: params.nameParam['reverse'] ?? false,
  ),
  'Scaffold': (Params params) => Scaffold(
    key: params.nameParam['key'],
    appBar: params.nameParam['appBar'],
    body: params.nameParam['body'],
    floatingActionButton: params.nameParam['floatingActionButton'],
    floatingActionButtonLocation: params.nameParam['floatingActionButtonLocation'],
    floatingActionButtonAnimator: params.nameParam['floatingActionButtonAnimator'],
    persistentFooterButtons:
    as<Widget>(params.nameParam['persistentFooterButtons']),
    drawer: params.nameParam['drawer'],
    endDrawer: params.nameParam['endDrawer'],
    bottomNavigationBar: params.nameParam['bottomNavigationBar'],
    bottomSheet: params.nameParam['bottomSheet'],
    backgroundColor: params.nameParam['backgroundColor'],
    resizeToAvoidBottomInset: params.nameParam['resizeToAvoidBottomInset'],
    primary: params.nameParam['primary'] ?? true,
    drawerDragStartBehavior:
    params.nameParam['drawerDragStartBehavior'] ?? DragStartBehavior.start,
    extendBody: params.nameParam['extendBody'] ?? false,
    extendBodyBehindAppBar: params.nameParam['extendBodyBehindAppBar'] ?? false,
    drawerScrimColor: params.nameParam['drawerScrimColor'],
    drawerEdgeDragWidth: params.nameParam['drawerEdgeDragWidth']?.toDouble(),
  ),
  'Scrollbar': (Params params) => Scrollbar(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    controller: params.nameParam['controller'],
  ),
  'SelectableText': (Params params) => SelectableText(
    params.posParam[0],
    key: params.nameParam['key'],
    focusNode: params.nameParam['focusNode'],
    style: params.nameParam['style'],
    strutStyle: params.nameParam['strutStyle'],
    textAlign: params.nameParam['textAlign'],
    textDirection: params.nameParam['textDirection'],
    showCursor: params.nameParam['showCursor'] ?? false,
    autofocus: params.nameParam['autofocus'] ?? false,
    toolbarOptions: params.nameParam['toolbarOptions'],
    maxLines: params.nameParam['maxLines'],
    cursorWidth: params.nameParam['cursorWidth']?.toDouble() ?? 2.0,
    cursorRadius: params.nameParam['cursorRadius'],
    cursorColor: params.nameParam['cursorColor'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
    enableInteractiveSelection:
    params.nameParam['enableInteractiveSelection'] ?? true,
    onTap: params.nameParam['onTap'],
    scrollPhysics: params.nameParam['scrollPhysics'],
    textWidthBasis: params.nameParam['textWidthBasis'],
  ),
  'SelectableText.rich': (Params params) => SelectableText.rich(
    params.posParam[0],
    key: params.nameParam['key'],
    focusNode: params.nameParam['focusNode'],
    style: params.nameParam['style'],
    strutStyle: params.nameParam['strutStyle'],
    textAlign: params.nameParam['textAlign'],
    textDirection: params.nameParam['textDirection'],
    showCursor: params.nameParam['showCursor'] ?? false,
    autofocus: params.nameParam['autofocus'] ?? false,
    toolbarOptions: params.nameParam['toolbarOptions'],
    maxLines: params.nameParam['maxLines'],
    cursorWidth: params.nameParam['cursorWidth']?.toDouble() ?? 2.0,
    cursorRadius: params.nameParam['cursorRadius'],
    cursorColor: params.nameParam['cursorColor'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
    enableInteractiveSelection:
    params.nameParam['enableInteractiveSelection'] ?? true,
    onTap: params.nameParam['onTap'],
    scrollPhysics: params.nameParam['scrollPhysics'],
    textWidthBasis: params.nameParam['textWidthBasis'],
  ),
  'Slider': (Params params) => Slider(
    key: params.nameParam['key'],
    value: params.nameParam['value']?.toDouble(),
    onChanged: params.nameParam['onChanged'],
    onChangeStart: params.nameParam['onChangeStart'],
    onChangeEnd: params.nameParam['onChangeEnd'],
    min: params.nameParam['min']?.toDouble() ?? 0.0,
    max: params.nameParam['max']?.toDouble() ?? 1.0,
    divisions: params.nameParam['divisions'],
    label: params.nameParam['label'],
    activeColor: params.nameParam['activeColor'],
    inactiveColor: params.nameParam['inactiveColor'],
    semanticFormatterCallback: params.nameParam['semanticFormatterCallback'],
  ),
  'Slider.adaptive': (Params params) => Slider.adaptive(
    key: params.nameParam['key'],
    value: params.nameParam['value']?.toDouble(),
    onChanged: params.nameParam['onChanged'],
    onChangeStart: params.nameParam['onChangeStart'],
    onChangeEnd: params.nameParam['onChangeEnd'],
    min: params.nameParam['min']?.toDouble() ?? 0.0,
    max: params.nameParam['max']?.toDouble() ?? 1.0,
    divisions: params.nameParam['divisions'],
    label: params.nameParam['label'],
    activeColor: params.nameParam['activeColor'],
    inactiveColor: params.nameParam['inactiveColor'],
    semanticFormatterCallback: params.nameParam['semanticFormatterCallback'],
  ),
  'SnackBar': (Params params) => SnackBar(
    key: params.nameParam['key'],
    content: params.nameParam['content'],
    backgroundColor: params.nameParam['backgroundColor'],
    elevation: params.nameParam['elevation']?.toDouble(),
    shape: params.nameParam['shape'],
    behavior: params.nameParam['behavior'],
    action: params.nameParam['action'],
    duration: params.nameParam['duration'] ?? _snackBarDisplayDuration,
    animation: params.nameParam['animation'],
    onVisible: params.nameParam['onVisible'],
  ),
  'SnackBarAction': (Params params) => SnackBarAction(
    key: params.nameParam['key'],
    textColor: params.nameParam['textColor'],
    disabledTextColor: params.nameParam['disabledTextColor'],
    label: params.nameParam['label'],
    onPressed: params.nameParam['onPressed'],
  ),
  'Stepper': (Params params) => Stepper(
    key: params.nameParam['key'],
    steps: as<Step>(params.nameParam['steps']),
    physics: params.nameParam['physics'],
    type: params.nameParam['type'] ?? StepperType.vertical,
    currentStep: params.nameParam['currentStep'] ?? 0,
    onStepTapped: params.nameParam['onStepTapped'],
    onStepContinue: params.nameParam['onStepContinue'],
    onStepCancel: params.nameParam['onStepCancel'],
    controlsBuilder: params.nameParam['controlsBuilder'],
  ),
  'Switch': (Params params) => Switch(
    key: params.nameParam['key'],
    value: params.nameParam['value'],
    onChanged: params.nameParam['onChanged'],
    activeColor: params.nameParam['activeColor'],
    activeTrackColor: params.nameParam['activeTrackColor'],
    inactiveThumbColor: params.nameParam['inactiveThumbColor'],
    inactiveTrackColor: params.nameParam['inactiveTrackColor'],
    activeThumbImage: params.nameParam['activeThumbImage'],
    inactiveThumbImage: params.nameParam['inactiveThumbImage'],
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
    focusColor: params.nameParam['focusColor'],
    hoverColor: params.nameParam['hoverColor'],
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
  ),
  'Switch.adaptive': (Params params) => Switch.adaptive(
    key: params.nameParam['key'],
    value: params.nameParam['value'],
    onChanged: params.nameParam['onChanged'],
    activeColor: params.nameParam['activeColor'],
    activeTrackColor: params.nameParam['activeTrackColor'],
    inactiveThumbColor: params.nameParam['inactiveThumbColor'],
    inactiveTrackColor: params.nameParam['inactiveTrackColor'],
    activeThumbImage: params.nameParam['activeThumbImage'],
    inactiveThumbImage: params.nameParam['inactiveThumbImage'],
    materialTapTargetSize: params.nameParam['materialTapTargetSize'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
    focusColor: params.nameParam['focusColor'],
    hoverColor: params.nameParam['hoverColor'],
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
  ),
  'SwitchListTile': (Params params) => SwitchListTile(
    key: params.nameParam['key'],
    value: params.nameParam['value'],
    onChanged: params.nameParam['onChanged'],
    activeColor: params.nameParam['activeColor'],
    activeTrackColor: params.nameParam['activeTrackColor'],
    inactiveThumbColor: params.nameParam['inactiveThumbColor'],
    inactiveTrackColor: params.nameParam['inactiveTrackColor'],
    activeThumbImage: params.nameParam['activeThumbImage'],
    inactiveThumbImage: params.nameParam['inactiveThumbImage'],
    title: params.nameParam['title'],
    subtitle: params.nameParam['subtitle'],
    isThreeLine: params.nameParam['isThreeLine'] ?? false,
    dense: params.nameParam['dense'],
    contentPadding: params.nameParam['contentPadding'],
    secondary: params.nameParam['secondary'],
    selected: params.nameParam['selected'] ?? false,
  ),
  'SwitchListTile.adaptive': (Params params) => SwitchListTile.adaptive(
    key: params.nameParam['key'],
    value: params.nameParam['value'],
    onChanged: params.nameParam['onChanged'],
    activeColor: params.nameParam['activeColor'],
    activeTrackColor: params.nameParam['activeTrackColor'],
    inactiveThumbColor: params.nameParam['inactiveThumbColor'],
    inactiveTrackColor: params.nameParam['inactiveTrackColor'],
    activeThumbImage: params.nameParam['activeThumbImage'],
    inactiveThumbImage: params.nameParam['inactiveThumbImage'],
    title: params.nameParam['title'],
    subtitle: params.nameParam['subtitle'],
    isThreeLine: params.nameParam['isThreeLine'] ?? false,
    dense: params.nameParam['dense'],
    contentPadding: params.nameParam['contentPadding'],
    secondary: params.nameParam['secondary'],
    selected: params.nameParam['selected'] ?? false,
  ),
  'Tab': (Params params) => Tab(
    key: params.nameParam['key'],
    text: params.nameParam['text'],
    icon: params.nameParam['icon'],
    child: params.nameParam['child'],
  ),
  'TabBar': (Params params) => TabBar(
    key: params.nameParam['key'],
    tabs: as<Widget>(params.nameParam['tabs']),
    controller: params.nameParam['controller'],
    isScrollable: params.nameParam['isScrollable'] ?? false,
    indicatorColor: params.nameParam['indicatorColor'],
    indicatorWeight: params.nameParam['indicatorWeight']?.toDouble() ?? 2.0,
    indicatorPadding: params.nameParam['indicatorPadding'] ?? EdgeInsets.zero,
    indicator: params.nameParam['indicator'],
    indicatorSize: params.nameParam['indicatorSize'],
    labelColor: params.nameParam['labelColor'],
    labelStyle: params.nameParam['labelStyle'],
    labelPadding: params.nameParam['labelPadding'],
    unselectedLabelColor: params.nameParam['unselectedLabelColor'],
    unselectedLabelStyle: params.nameParam['unselectedLabelStyle'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
    onTap: params.nameParam['onTap'],
  ),
  'TabBarView': (Params params) => TabBarView(
    key: params.nameParam['key'],
    children: as<Widget>(params.nameParam['children']),
    controller: params.nameParam['controller'],
    physics: params.nameParam['physics'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'TabPageSelector': (Params params) => TabPageSelector(
    key: params.nameParam['key'],
    controller: params.nameParam['controller'],
    indicatorSize: params.nameParam['indicatorSize']?.toDouble() ?? 12.0,
    color: params.nameParam['color'],
    selectedColor: params.nameParam['selectedColor'],
  ),
  'TabPageSelectorIndicator': (Params params) => TabPageSelectorIndicator(
    key: params.nameParam['key'],
    backgroundColor: params.nameParam['backgroundColor'],
    borderColor: params.nameParam['borderColor'],
    size: params.nameParam['size']?.toDouble(),
  ),
  'TextField': (Params params) => TextField(
    key: params.nameParam['key'],
    controller: params.nameParam['controller'],
    focusNode: params.nameParam['focusNode'],
    decoration: params.nameParam['decoration'] ?? const InputDecoration(),
    keyboardType: params.nameParam['keyboardType'],
    textInputAction: params.nameParam['textInputAction'],
    textCapitalization:
    params.nameParam['textCapitalization'] ?? TextCapitalization.none,
    style: params.nameParam['style'],
    strutStyle: params.nameParam['strutStyle'],
    textAlign: params.nameParam['textAlign'] ?? TextAlign.start,
    textAlignVertical: params.nameParam['textAlignVertical'],
    textDirection: params.nameParam['textDirection'],
    readOnly: params.nameParam['readOnly'] ?? false,
    toolbarOptions: params.nameParam['toolbarOptions'],
    showCursor: params.nameParam['showCursor'],
    autofocus: params.nameParam['autofocus'] ?? false,
    obscureText: params.nameParam['obscureText'] ?? false,
    autocorrect: params.nameParam['autocorrect'] ?? true,
    enableSuggestions: params.nameParam['enableSuggestions'] ?? true,
    maxLines: params.nameParam['maxLines'] ?? 1,
    minLines: params.nameParam['minLines'],
    expands: params.nameParam['expands'] ?? false,
    maxLength: params.nameParam['maxLength'],
    maxLengthEnforcement: params.nameParam['maxLengthEnforcement'] ?? true,
    onChanged: params.nameParam['onChanged'],
    onEditingComplete: params.nameParam['onEditingComplete'],
    onSubmitted: params.nameParam['onSubmitted'],
    inputFormatters: as<TextInputFormatter>(params.nameParam['inputFormatters']),
    enabled: params.nameParam['enabled'],
    cursorWidth: params.nameParam['cursorWidth']?.toDouble() ?? 2.0,
    cursorRadius: params.nameParam['cursorRadius'],
    cursorColor: params.nameParam['cursorColor'],
    keyboardAppearance: params.nameParam['keyboardAppearance'],
    scrollPadding: params.nameParam['scrollPadding'] ?? const EdgeInsets.all(20.0),
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
    enableInteractiveSelection:
    params.nameParam['enableInteractiveSelection'] ?? true,
    onTap: params.nameParam['onTap'],
    buildCounter: params.nameParam['buildCounter'],
    scrollController: params.nameParam['scrollController'],
    scrollPhysics: params.nameParam['scrollPhysics'],
  ),
  'Theme': (Params params) => Theme(
    key: params.nameParam['key'],
    data: params.nameParam['data'],
    child: params.nameParam['child'],
  ),
  'ToggleButtons': (Params params) => ToggleButtons(
    key: params.nameParam['key'],
    children: as<Widget>(params.nameParam['children']),
    isSelected: as<bool>(params.nameParam['isSelected']),
    onPressed: params.nameParam['onPressed'],
    textStyle: params.nameParam['textStyle'],
    constraints: params.nameParam['constraints'],
    color: params.nameParam['color'],
    selectedColor: params.nameParam['selectedColor'],
    disabledColor: params.nameParam['disabledColor'],
    fillColor: params.nameParam['fillColor'],
    focusColor: params.nameParam['focusColor'],
    highlightColor: params.nameParam['highlightColor'],
    hoverColor: params.nameParam['hoverColor'],
    splashColor: params.nameParam['splashColor'],
    focusNodes: as<FocusNode>(params.nameParam['focusNodes']),
    renderBorder: params.nameParam['renderBorder'] ?? true,
    borderColor: params.nameParam['borderColor'],
    selectedBorderColor: params.nameParam['selectedBorderColor'],
    disabledBorderColor: params.nameParam['disabledBorderColor'],
    borderRadius: params.nameParam['borderRadius'],
    borderWidth: params.nameParam['borderWidth']?.toDouble(),
  ),
  'Tooltip': (Params params) => Tooltip(
    key: params.nameParam['key'],
    message: params.nameParam['message'],
    height: params.nameParam['height']?.toDouble(),
    padding: params.nameParam['padding'],
    margin: params.nameParam['margin'],
    verticalOffset: params.nameParam['verticalOffset']?.toDouble(),
    preferBelow: params.nameParam['preferBelow'],
    excludeFromSemantics: params.nameParam['excludeFromSemantics'],
    decoration: params.nameParam['decoration'],
    textStyle: params.nameParam['textStyle'],
    waitDuration: params.nameParam['waitDuration'],
    showDuration: params.nameParam['showDuration'],
    child: params.nameParam['child'],
  ),
  'UserAccountsDrawerHeader': (Params params) => UserAccountsDrawerHeader(
    key: params.nameParam['key'],
    decoration: params.nameParam['decoration'],
    margin: params.nameParam['margin'] ?? const EdgeInsets.only(bottom: 8.0),
    currentAccountPicture: params.nameParam['currentAccountPicture'],
    otherAccountsPictures: as<Widget>(params.nameParam['otherAccountsPictures']),
    accountName: params.nameParam['accountName'],
    accountEmail: params.nameParam['accountEmail'],
    onDetailsPressed: params.nameParam['onDetailsPressed'],
    arrowColor: params.nameParam['arrowColor'] ?? Colors.white,
  ),
  'AbsorbPointer': (Params params) => AbsorbPointer(
    key: params.nameParam['key'],
    absorbing: params.nameParam['absorbing'] ?? true,
    child: params.nameParam['child'],
    ignoringSemantics: params.nameParam['ignoringSemantics'],
  ),
  'Align': (Params params) => Align(
    key: params.nameParam['key'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    widthFactor: params.nameParam['widthFactor']?.toDouble(),
    heightFactor: params.nameParam['heightFactor']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'AspectRatio': (Params params) => AspectRatio(
    key: params.nameParam['key'],
    aspectRatio: params.nameParam['aspectRatio']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'BackdropFilter': (Params params) => BackdropFilter(
    key: params.nameParam['key'],
    filter: params.nameParam['filter'],
    child: params.nameParam['child'],
  ),
  'Baseline': (Params params) => Baseline(
    key: params.nameParam['key'],
    baseline: params.nameParam['baseline']?.toDouble(),
    baselineType: params.nameParam['baselineType'],
    child: params.nameParam['child'],
  ),
  'BlockSemantics': (Params params) => BlockSemantics(
    key: params.nameParam['key'],
    blocking: params.nameParam['blocking'] ?? true,
    child: params.nameParam['child'],
  ),
  'Builder': (Params params) => Builder(
    key: params.nameParam['key'],
    builder: params.nameParam['builder'],
  ),
  'Center': (Params params) => Center(
    key: params.nameParam['key'],
    widthFactor: params.nameParam['widthFactor']?.toDouble(),
    heightFactor: params.nameParam['heightFactor']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'ClipOval': (Params params) => ClipOval(
    key: params.nameParam['key'],
    clipper: params.nameParam['clipper'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.antiAlias,
    child: params.nameParam['child'],
  ),
  'ClipPath': (Params params) => ClipPath(
    key: params.nameParam['key'],
    clipper: params.nameParam['clipper'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.antiAlias,
    child: params.nameParam['child'],
  ),
  'ClipRRect': (Params params) => ClipRRect(
    key: params.nameParam['key'],
    borderRadius: params.nameParam['borderRadius'] ?? BorderRadius.zero,
    clipper: params.nameParam['clipper'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.antiAlias,
    child: params.nameParam['child'],
  ),
  'ClipRect': (Params params) => ClipRect(
    key: params.nameParam['key'],
    clipper: params.nameParam['clipper'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.hardEdge,
    child: params.nameParam['child'],
  ),
  'Column': (Params params) => Column(
    key: params.nameParam['key'],
    mainAxisAlignment:
    params.nameParam['mainAxisAlignment'] ?? MainAxisAlignment.start,
    mainAxisSize: params.nameParam['mainAxisSize'] ?? MainAxisSize.max,
    crossAxisAlignment:
    params.nameParam['crossAxisAlignment'] ?? CrossAxisAlignment.center,
    textDirection: params.nameParam['textDirection'],
    verticalDirection:
    params.nameParam['verticalDirection'] ?? VerticalDirection.down,
    textBaseline: params.nameParam['textBaseline'],
    children: as<Widget>(params.nameParam['children']),
  ),
  'CompositedTransformFollower': (Params params) => CompositedTransformFollower(
    key: params.nameParam['key'],
    link: params.nameParam['link'],
    showWhenUnlinked: params.nameParam['showWhenUnlinked'] ?? true,
    offset: params.nameParam['offset'] ?? Offset.zero,
    child: params.nameParam['child'],
  ),
  'CompositedTransformTarget': (Params params) => CompositedTransformTarget(
    key: params.nameParam['key'],
    link: params.nameParam['link'],
    child: params.nameParam['child'],
  ),
  'ConstrainedBox': (Params params) => ConstrainedBox(
    key: params.nameParam['key'],
    constraints: params.nameParam['constraints'],
    child: params.nameParam['child'],
  ),
  'CustomMultiChildLayout': (Params params) => CustomMultiChildLayout(
    key: params.nameParam['key'],
    delegate: params.nameParam['delegate'],
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'CustomPaint': (Params params) => CustomPaint(
    key: params.nameParam['key'],
    painter: params.nameParam['painter'],
    foregroundPainter: params.nameParam['foregroundPainter'],
    size: params.nameParam['size'] ?? Size.zero,
    isComplex: params.nameParam['isComplex'] ?? false,
    willChange: params.nameParam['willChange'] ?? false,
    child: params.nameParam['child'],
  ),
  'CustomSingleChildLayout': (Params params) => CustomSingleChildLayout(
    key: params.nameParam['key'],
    delegate: params.nameParam['delegate'],
    child: params.nameParam['child'],
  ),
  'DefaultAssetBundle': (Params params) => DefaultAssetBundle(
    key: params.nameParam['key'],
    bundle: params.nameParam['bundle'],
    child: params.nameParam['child'],
  ),
  'Directionality': (Params params) => Directionality(
    key: params.nameParam['key'],
    textDirection: params.nameParam['textDirection'],
    child: params.nameParam['child'],
  ),
  'ExcludeSemantics': (Params params) => ExcludeSemantics(
    key: params.nameParam['key'],
    excluding: params.nameParam['excluding'] ?? true,
    child: params.nameParam['child'],
  ),
  'Expanded': (Params params) => Expanded(
    key: params.nameParam['key'],
    flex: params.nameParam['flex'] ?? 1,
    child: params.nameParam['child'],
  ),
  'FittedBox': (Params params) => FittedBox(
    key: params.nameParam['key'],
    fit: params.nameParam['fit'] ?? BoxFit.contain,
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    child: params.nameParam['child'],
  ),
  'Flex': (Params params) => Flex(
    key: params.nameParam['key'],
    direction: params.nameParam['direction'],
    mainAxisAlignment:
    params.nameParam['mainAxisAlignment'] ?? MainAxisAlignment.start,
    mainAxisSize: params.nameParam['mainAxisSize'] ?? MainAxisSize.max,
    crossAxisAlignment:
    params.nameParam['crossAxisAlignment'] ?? CrossAxisAlignment.center,
    textDirection: params.nameParam['textDirection'],
    verticalDirection:
    params.nameParam['verticalDirection'] ?? VerticalDirection.down,
    textBaseline: params.nameParam['textBaseline'],
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'Flexible': (Params params) => Flexible(
    key: params.nameParam['key'],
    flex: params.nameParam['flex'] ?? 1,
    fit: params.nameParam['fit'] ?? FlexFit.loose,
    child: params.nameParam['child'],
  ),
  'Flow': (Params params) => Flow(
    key: params.nameParam['key'],
    delegate: params.nameParam['delegate'],
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'Flow.unwrapped': (Params params) => Flow.unwrapped(
    key: params.nameParam['key'],
    delegate: params.nameParam['delegate'],
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'FractionalTranslation': (Params params) => FractionalTranslation(
    key: params.nameParam['key'],
    translation: params.nameParam['translation'],
    transformHitTests: params.nameParam['transformHitTests'] ?? true,
    child: params.nameParam['child'],
  ),
  'FractionallySizedBox': (Params params) => FractionallySizedBox(
    key: params.nameParam['key'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    widthFactor: params.nameParam['widthFactor']?.toDouble(),
    heightFactor: params.nameParam['heightFactor']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'IgnorePointer': (Params params) => IgnorePointer(
    key: params.nameParam['key'],
    ignoring: params.nameParam['ignoring'] ?? true,
    ignoringSemantics: params.nameParam['ignoringSemantics'],
    child: params.nameParam['child'],
  ),
  'IndexedSemantics': (Params params) => IndexedSemantics(
    key: params.nameParam['key'],
    index: params.nameParam['index'],
    child: params.nameParam['child'],
  ),
  'IndexedStack': (Params params) => IndexedStack(
    key: params.nameParam['key'],
    alignment: params.nameParam['alignment'] ?? AlignmentDirectional.topStart,
    textDirection: params.nameParam['textDirection'],
    sizing: params.nameParam['sizing'] ?? StackFit.loose,
    index: params.nameParam['index'] ?? 0,
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'IntrinsicHeight': (Params params) => IntrinsicHeight(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),
  'IntrinsicWidth': (Params params) => IntrinsicWidth(
    key: params.nameParam['key'],
    stepWidth: params.nameParam['stepWidth']?.toDouble(),
    stepHeight: params.nameParam['stepHeight']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'KeyedSubtree': (Params params) => KeyedSubtree(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),
  'KeyedSubtree.wrap': (Params params) => KeyedSubtree.wrap(
    params.posParam[0],
    params.posParam[1],
  ),
  'LayoutId': (Params params) => LayoutId(
    key: params.nameParam['key'],
    id: params.nameParam['id'],
    child: params.nameParam['child'],
  ),
  'LimitedBox': (Params params) => LimitedBox(
    key: params.nameParam['key'],
    maxWidth: params.nameParam['maxWidth']?.toDouble() ?? double.infinity,
    maxHeight: params.nameParam['maxHeight']?.toDouble() ?? double.infinity,
    child: params.nameParam['child'],
  ),
  'ListBody': (Params params) => ListBody(
    key: params.nameParam['key'],
    mainAxis: params.nameParam['mainAxis'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'Listener': (Params params) => Listener(
    key: params.nameParam['key'],
    onPointerDown: params.nameParam['onPointerDown'],
    onPointerMove: params.nameParam['onPointerMove'],
    onPointerHover: params.nameParam['onPointerHover'],
    onPointerUp: params.nameParam['onPointerUp'],
    onPointerCancel: params.nameParam['onPointerCancel'],
    onPointerSignal: params.nameParam['onPointerSignal'],
    behavior: params.nameParam['behavior'] ?? HitTestBehavior.deferToChild,
    child: params.nameParam['child'],
  ),
  'MergeSemantics': (Params params) => MergeSemantics(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),
  'MetaData': (Params params) => MetaData(
    key: params.nameParam['key'],
    metaData: params.nameParam['metaData'],
    behavior: params.nameParam['behavior'] ?? HitTestBehavior.deferToChild,
    child: params.nameParam['child'],
  ),
  'MouseRegion': (Params params) => MouseRegion(
    key: params.nameParam['key'],
    onEnter: params.nameParam['onEnter'],
    onExit: params.nameParam['onExit'],
    onHover: params.nameParam['onHover'],
    opaque: params.nameParam['opaque'] ?? true,
    child: params.nameParam['child'],
  ),
  'Offstage': (Params params) => Offstage(
    key: params.nameParam['key'],
    offstage: params.nameParam['offstage'] ?? true,
    child: params.nameParam['child'],
  ),
  'Opacity': (Params params) => Opacity(
    key: params.nameParam['key'],
    opacity: params.nameParam['opacity']?.toDouble(),
    alwaysIncludeSemantics: params.nameParam['alwaysIncludeSemantics'] ?? false,
    child: params.nameParam['child'],
  ),
  'OverflowBox': (Params params) => OverflowBox(
    key: params.nameParam['key'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    minWidth: params.nameParam['minWidth']?.toDouble(),
    maxWidth: params.nameParam['maxWidth']?.toDouble(),
    minHeight: params.nameParam['minHeight']?.toDouble(),
    maxHeight: params.nameParam['maxHeight']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'Padding': (Params params) => Padding(
    key: params.nameParam['key'],
    padding: params.nameParam['padding'],
    child: params.nameParam['child'],
  ),
  'PhysicalModel': (Params params) => PhysicalModel(
    key: params.nameParam['key'],
    shape: params.nameParam['shape'] ?? BoxShape.rectangle,
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    borderRadius: params.nameParam['borderRadius'],
    elevation: params.nameParam['elevation']?.toDouble() ?? 0.0,
    color: params.nameParam['color'],
    shadowColor: params.nameParam['shadowColor'] ?? const Color(0xFF000000),
    child: params.nameParam['child'],
  ),
  'PhysicalShape': (Params params) => PhysicalShape(
    key: params.nameParam['key'],
    clipper: params.nameParam['clipper'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    elevation: params.nameParam['elevation']?.toDouble() ?? 0.0,
    color: params.nameParam['color'],
    shadowColor: params.nameParam['shadowColor'] ?? const Color(0xFF000000),
    child: params.nameParam['child'],
  ),
  'Positioned': (Params params) => Positioned(
    key: params.nameParam['key'],
    left: params.nameParam['left']?.toDouble(),
    top: params.nameParam['top']?.toDouble(),
    right: params.nameParam['right']?.toDouble(),
    bottom: params.nameParam['bottom']?.toDouble(),
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'Positioned.fromRect': (Params params) => Positioned.fromRect(
    key: params.nameParam['key'],
    rect: params.nameParam['rect'],
    child: params.nameParam['child'],
  ),
  'Positioned.fromRelativeRect': (Params params) => Positioned.fromRelativeRect(
    key: params.nameParam['key'],
    rect: params.nameParam['rect'],
    child: params.nameParam['child'],
  ),
  'Positioned.fill': (Params params) => Positioned.fill(
    key: params.nameParam['key'],
    left: params.nameParam['left']?.toDouble() ?? 0.0,
    top: params.nameParam['top']?.toDouble() ?? 0.0,
    right: params.nameParam['right']?.toDouble() ?? 0.0,
    bottom: params.nameParam['bottom']?.toDouble() ?? 0.0,
    child: params.nameParam['child'],
  ),
  'Positioned.directional': (Params params) => Positioned.directional(
    key: params.nameParam['key'],
    textDirection: params.nameParam['textDirection'],
    start: params.nameParam['start']?.toDouble(),
    top: params.nameParam['top']?.toDouble() ?? 0.0,
    end: params.nameParam['end']?.toDouble(),
    bottom: params.nameParam['bottom']?.toDouble() ?? 0.0,
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'PositionedDirectional': (Params params) => PositionedDirectional(
    key: params.nameParam['key'],
    start: params.nameParam['start']?.toDouble(),
    top: params.nameParam['top']?.toDouble(),
    end: params.nameParam['end']?.toDouble(),
    bottom: params.nameParam['bottom']?.toDouble(),
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'RawImage': (Params params) => RawImage(
    key: params.nameParam['key'],
    image: params.nameParam['image'],
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    scale: params.nameParam['scale']?.toDouble() ?? 1.0,
    color: params.nameParam['color'],
    colorBlendMode: params.nameParam['colorBlendMode'],
    fit: params.nameParam['fit'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    repeat: params.nameParam['repeat'] ?? ImageRepeat.noRepeat,
    centerSlice: params.nameParam['centerSlice'],
    matchTextDirection: params.nameParam['matchTextDirection'] ?? false,
    invertColors: params.nameParam['invertColors'] ?? false,
    filterQuality: params.nameParam['filterQuality'] ?? FilterQuality.low,
  ),
  'RepaintBoundary': (Params params) => RepaintBoundary(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),
  'RepaintBoundary.wrap': (Params params) => RepaintBoundary.wrap(
    params.posParam[0],
    params.posParam[1],
  ),
  'RichText': (Params params) => RichText(
    key: params.nameParam['key'],
    text: params.nameParam['text'],
    textAlign: params.nameParam['textAlign'] ?? TextAlign.start,
    textDirection: params.nameParam['textDirection'],
    softWrap: params.nameParam['softWrap'] ?? true,
    overflow: params.nameParam['overflow'] ?? TextOverflow.clip,
    textScaleFactor: params.nameParam['textScaleFactor']?.toDouble() ?? 1.0,
    maxLines: params.nameParam['maxLines'],
    locale: params.nameParam['locale'],
    strutStyle: params.nameParam['strutStyle'],
    textWidthBasis: params.nameParam['textWidthBasis'] ?? TextWidthBasis.parent,
  ),
  'RotatedBox': (Params params) => RotatedBox(
    key: params.nameParam['key'],
    quarterTurns: params.nameParam['quarterTurns'],
    child: params.nameParam['child'],
  ),
  'Row': (Params params) => Row(
    key: params.nameParam['key'],
    mainAxisAlignment:
    params.nameParam['mainAxisAlignment'] ?? MainAxisAlignment.start,
    mainAxisSize: params.nameParam['mainAxisSize'] ?? MainAxisSize.max,
    crossAxisAlignment:
    params.nameParam['crossAxisAlignment'] ?? CrossAxisAlignment.center,
    textDirection: params.nameParam['textDirection'],
    verticalDirection:
    params.nameParam['verticalDirection'] ?? VerticalDirection.down,
    textBaseline: params.nameParam['textBaseline'],
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'Semantics': (Params params) => Semantics(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    container: params.nameParam['container'] ?? false,
    explicitChildNodes: params.nameParam['explicitChildNodes'] ?? false,
    excludeSemantics: params.nameParam['excludeSemantics'] ?? false,
    enabled: params.nameParam['enabled'],
    checked: params.nameParam['checked'],
    selected: params.nameParam['selected'],
    toggled: params.nameParam['toggled'],
    button: params.nameParam['button'],
    link: params.nameParam['link'],
    header: params.nameParam['header'],
    textField: params.nameParam['textField'],
    readOnly: params.nameParam['readOnly'],
    focusable: params.nameParam['focusable'],
    focused: params.nameParam['focused'],
    inMutuallyExclusiveGroup: params.nameParam['inMutuallyExclusiveGroup'],
    obscured: params.nameParam['obscured'],
    multiline: params.nameParam['multiline'],
    scopesRoute: params.nameParam['scopesRoute'],
    namesRoute: params.nameParam['namesRoute'],
    hidden: params.nameParam['hidden'],
    image: params.nameParam['image'],
    liveRegion: params.nameParam['liveRegion'],
    maxValueLength: params.nameParam['maxValueLength'],
    currentValueLength: params.nameParam['currentValueLength'],
    label: params.nameParam['label'],
    value: params.nameParam['value'],
    increasedValue: params.nameParam['increasedValue'],
    decreasedValue: params.nameParam['decreasedValue'],
    hint: params.nameParam['hint'],
    onTapHint: params.nameParam['onTapHint'],
    onLongPressHint: params.nameParam['onLongPressHint'],
    textDirection: params.nameParam['textDirection'],
    sortKey: params.nameParam['sortKey'],
    onTap: params.nameParam['onTap'],
    onLongPress: params.nameParam['onLongPress'],
    onScrollLeft: params.nameParam['onScrollLeft'],
    onScrollRight: params.nameParam['onScrollRight'],
    onScrollUp: params.nameParam['onScrollUp'],
    onScrollDown: params.nameParam['onScrollDown'],
    onIncrease: params.nameParam['onIncrease'],
    onDecrease: params.nameParam['onDecrease'],
    onCopy: params.nameParam['onCopy'],
    onCut: params.nameParam['onCut'],
    onPaste: params.nameParam['onPaste'],
    onDismiss: params.nameParam['onDismiss'],
    onMoveCursorForwardByCharacter:
    params.nameParam['onMoveCursorForwardByCharacter'],
    onMoveCursorBackwardByCharacter:
    params.nameParam['onMoveCursorBackwardByCharacter'],
    onSetSelection: params.nameParam['onSetSelection'],
    onDidGainAccessibilityFocus: params.nameParam['onDidGainAccessibilityFocus'],
    onDidLoseAccessibilityFocus: params.nameParam['onDidLoseAccessibilityFocus'],
    customSemanticsActions: params.nameParam['customSemanticsActions'],
  ),
  'Semantics.fromProperties': (Params params) => Semantics.fromProperties(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    container: params.nameParam['container'] ?? false,
    explicitChildNodes: params.nameParam['explicitChildNodes'] ?? false,
    excludeSemantics: params.nameParam['excludeSemantics'] ?? false,
    properties: params.nameParam['properties'],
  ),
  'ShaderMask': (Params params) => ShaderMask(
    key: params.nameParam['key'],
    shaderCallback: params.nameParam['shaderCallback'],
    blendMode: params.nameParam['blendMode'] ?? BlendMode.modulate,
    child: params.nameParam['child'],
  ),
  'SizedBox': (Params params) => SizedBox(
    key: params.nameParam['key'],
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    child: params.nameParam['child'],
  ),
  'SizedBox.expand': (Params params) => SizedBox.expand(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),
  'SizedBox.shrink': (Params params) => SizedBox.shrink(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),
  'SizedBox.fromSize': (Params params) => SizedBox.fromSize(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    size: params.nameParam['size'],
  ),
  'SizedOverflowBox': (Params params) => SizedOverflowBox(
    key: params.nameParam['key'],
    size: params.nameParam['size'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    child: params.nameParam['child'],
  ),
  'SliverPadding': (Params params) => SliverPadding(
    key: params.nameParam['key'],
    padding: params.nameParam['padding'],
    sliver: params.nameParam['sliver'],
  ),
  'SliverToBoxAdapter': (Params params) => SliverToBoxAdapter(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),
  'Stack': (Params params) => Stack(
    key: params.nameParam['key'],
    alignment: params.nameParam['alignment'] ?? AlignmentDirectional.topStart,
    textDirection: params.nameParam['textDirection'],
    fit: params.nameParam['fit'] ?? StackFit.loose,
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'StatefulBuilder': (Params params) => StatefulBuilder(
    key: params.nameParam['key'],
    builder: params.nameParam['builder'],
  ),
  'Transform': (Params params) => Transform(
    key: params.nameParam['key'],
    transform: params.nameParam['transform'],
    origin: params.nameParam['origin'],
    alignment: params.nameParam['alignment'],
    transformHitTests: params.nameParam['transformHitTests'] ?? true,
    child: params.nameParam['child'],
  ),
  'Transform.rotate': (Params params) => Transform.rotate(
    key: params.nameParam['key'],
    angle: params.nameParam['angle']?.toDouble(),
    origin: params.nameParam['origin'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    transformHitTests: params.nameParam['transformHitTests'] ?? true,
    child: params.nameParam['child'],
  ),
  'Transform.translate': (Params params) => Transform.translate(
    key: params.nameParam['key'],
    offset: params.nameParam['offset'],
    transformHitTests: params.nameParam['transformHitTests'] ?? true,
    child: params.nameParam['child'],
  ),
  'Transform.scale': (Params params) => Transform.scale(
    key: params.nameParam['key'],
    scale: params.nameParam['scale']?.toDouble(),
    origin: params.nameParam['origin'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    transformHitTests: params.nameParam['transformHitTests'] ?? true,
    child: params.nameParam['child'],
  ),
  'UnconstrainedBox': (Params params) => UnconstrainedBox(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    textDirection: params.nameParam['textDirection'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    constrainedAxis: params.nameParam['constrainedAxis'],
  ),
  'WidgetToRenderBoxAdapter': (Params params) => WidgetToRenderBoxAdapter(
    renderBox: params.nameParam['renderBox'],
    onBuild: params.nameParam['onBuild'],
  ),
  'Wrap': (Params params) => Wrap(
    key: params.nameParam['key'],
    direction: params.nameParam['direction'] ?? Axis.horizontal,
    alignment: params.nameParam['alignment'] ?? WrapAlignment.start,
    spacing: params.nameParam['spacing']?.toDouble() ?? 0.0,
    runAlignment: params.nameParam['runAlignment'] ?? WrapAlignment.start,
    runSpacing: params.nameParam['runSpacing']?.toDouble() ?? 0.0,
    crossAxisAlignment:
    params.nameParam['crossAxisAlignment'] ?? WrapCrossAlignment.start,
    textDirection: params.nameParam['textDirection'],
    verticalDirection:
    params.nameParam['verticalDirection'] ?? VerticalDirection.down,
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'Actions': (Params params) => Actions(
    key: params.nameParam['key'],
    dispatcher: params.nameParam['dispatcher'],
    actions: params.nameParam['actions'],
    child: params.nameParam['child'],
  ),
  'FocusableActionDetector': (Params params) => FocusableActionDetector(
    key: params.nameParam['key'],
    enabled: params.nameParam['enabled'] ?? true,
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    shortcuts: params.nameParam['shortcuts'],
    actions: params.nameParam['actions'],
    onShowFocusHighlight: params.nameParam['onShowFocusHighlight'],
    onShowHoverHighlight: params.nameParam['onShowHoverHighlight'],
    onFocusChange: params.nameParam['onFocusChange'],
    child: params.nameParam['child'],
  ),
  'AlignTransition': (Params params) => AlignTransition(
    key: params.nameParam['key'],
    alignment: params.nameParam['alignment'],
    child: params.nameParam['child'],
    widthFactor: params.nameParam['widthFactor']?.toDouble(),
    heightFactor: params.nameParam['heightFactor']?.toDouble(),
  ),
  'AnimatedBuilder': (Params params) => AnimatedBuilder(
    key: params.nameParam['key'],
    animation: params.nameParam['animation'],
    builder: params.nameParam['builder'],
    child: params.nameParam['child'],
  ),
  'DecoratedBoxTransition': (Params params) => DecoratedBoxTransition(
    key: params.nameParam['key'],
    decoration: params.nameParam['decoration'],
    position: params.nameParam['position'] ?? DecorationPosition.background,
    child: params.nameParam['child'],
  ),
  'DefaultTextStyleTransition': (Params params) => DefaultTextStyleTransition(
    key: params.nameParam['key'],
    style: params.nameParam['style'],
    child: params.nameParam['child'],
    textAlign: params.nameParam['textAlign'],
    softWrap: params.nameParam['softWrap'] ?? true,
    overflow: params.nameParam['overflow'] ?? TextOverflow.clip,
    maxLines: params.nameParam['maxLines'],
  ),
  'FadeTransition': (Params params) => FadeTransition(
    key: params.nameParam['key'],
    opacity: params.nameParam['opacity'],
    alwaysIncludeSemantics: params.nameParam['alwaysIncludeSemantics'] ?? false,
    child: params.nameParam['child'],
  ),
  'PositionedTransition': (Params params) => PositionedTransition(
    key: params.nameParam['key'],
    rect: params.nameParam['rect'],
    child: params.nameParam['child'],
  ),
  'RelativePositionedTransition': (Params params) => RelativePositionedTransition(
    key: params.nameParam['key'],
    rect: params.nameParam['rect'],
    size: params.nameParam['size'],
    child: params.nameParam['child'],
  ),
  'RotationTransition': (Params params) => RotationTransition(
    key: params.nameParam['key'],
    turns: params.nameParam['turns'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    child: params.nameParam['child'],
  ),
  'ScaleTransition': (Params params) => ScaleTransition(
    key: params.nameParam['key'],
    scale: params.nameParam['scale'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    child: params.nameParam['child'],
  ),
  'SizeTransition': (Params params) => SizeTransition(
    key: params.nameParam['key'],
    axis: params.nameParam['axis'] ?? Axis.vertical,
    sizeFactor: params.nameParam['sizeFactor'],
    axisAlignment: params.nameParam['axisAlignment']?.toDouble() ?? 0.0,
    child: params.nameParam['child'],
  ),
  'SlideTransition': (Params params) => SlideTransition(
    key: params.nameParam['key'],
    position: params.nameParam['position'],
    transformHitTests: params.nameParam['transformHitTests'] ?? true,
    textDirection: params.nameParam['textDirection'],
    child: params.nameParam['child'],
  ),
  'AndroidView': (Params params) => AndroidView(
    key: params.nameParam['key'],
    viewType: params.nameParam['viewType'],
    onPlatformViewCreated: params.nameParam['onPlatformViewCreated'],
    hitTestBehavior:
    params.nameParam['hitTestBehavior'] ?? PlatformViewHitTestBehavior.opaque,
    layoutDirection: params.nameParam['layoutDirection'],
    gestureRecognizers: params.nameParam['gestureRecognizers'],
    creationParams: params.nameParam['creationParams'],
    creationParamsCodec: params.nameParam['creationParamsCodec'],
  ),
  'HtmlElementView': (Params params) => HtmlElementView(
    key: params.nameParam['key'],
    viewType: params.nameParam['viewType'],
  ),
  'PlatformViewLink': (Params params) => PlatformViewLink(
    key: params.nameParam['key'],
    surfaceFactory: params.nameParam['surfaceFactory'],
    onCreatePlatformView: params.nameParam['onCreatePlatformView'],
    viewType: params.nameParam['viewType'],
  ),
  'PlatformViewSurface': (Params params) => PlatformViewSurface(
    controller: params.nameParam['controller'],
    hitTestBehavior: params.nameParam['hitTestBehavior'],
    gestureRecognizers: params.nameParam['gestureRecognizers'],
  ),
  'UiKitView': (Params params) => UiKitView(
    key: params.nameParam['key'],
    viewType: params.nameParam['viewType'],
    onPlatformViewCreated: params.nameParam['onPlatformViewCreated'],
    hitTestBehavior:
    params.nameParam['hitTestBehavior'] ?? PlatformViewHitTestBehavior.opaque,
    layoutDirection: params.nameParam['layoutDirection'],
    creationParams: params.nameParam['creationParams'],
    creationParamsCodec: params.nameParam['creationParamsCodec'],
    gestureRecognizers: params.nameParam['gestureRecognizers'],
  ),
  'AnimatedAlign': (Params params) => AnimatedAlign(
    key: params.nameParam['key'],
    alignment: params.nameParam['alignment'],
    child: params.nameParam['child'],
    curve: params.nameParam['curve'] ?? Curves.linear,
    duration: params.nameParam['duration'],
    onEnd: params.nameParam['onEnd'],
  ),
  'AnimatedContainer': (Params params) => AnimatedContainer(
    key: params.nameParam['key'],
    alignment: params.nameParam['alignment'],
    padding: params.nameParam['padding'],
    color: params.nameParam['color'],
    decoration: params.nameParam['decoration'],
    foregroundDecoration: params.nameParam['foregroundDecoration'],
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    constraints: params.nameParam['constraints'],
    margin: params.nameParam['margin'],
    transform: params.nameParam['transform'],
    child: params.nameParam['child'],
    curve: params.nameParam['curve'] ?? Curves.linear,
    duration: params.nameParam['duration'],
    onEnd: params.nameParam['onEnd'],
  ),
  'AnimatedDefaultTextStyle': (Params params) => AnimatedDefaultTextStyle(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    style: params.nameParam['style'],
    textAlign: params.nameParam['textAlign'],
    softWrap: params.nameParam['softWrap'] ?? true,
    overflow: params.nameParam['overflow'] ?? TextOverflow.clip,
    maxLines: params.nameParam['maxLines'],
    curve: params.nameParam['curve'] ?? Curves.linear,
    duration: params.nameParam['duration'],
    onEnd: params.nameParam['onEnd'],
  ),
  'AnimatedOpacity': (Params params) => AnimatedOpacity(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    opacity: params.nameParam['opacity']?.toDouble(),
    curve: params.nameParam['curve'] ?? Curves.linear,
    duration: params.nameParam['duration'],
    onEnd: params.nameParam['onEnd'],
    alwaysIncludeSemantics: params.nameParam['alwaysIncludeSemantics'] ?? false,
  ),
  'AnimatedPadding': (Params params) => AnimatedPadding(
    key: params.nameParam['key'],
    padding: params.nameParam['padding'],
    child: params.nameParam['child'],
    curve: params.nameParam['curve'] ?? Curves.linear,
    duration: params.nameParam['duration'],
    onEnd: params.nameParam['onEnd'],
  ),
  'AnimatedPhysicalModel': (Params params) => AnimatedPhysicalModel(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    shape: params.nameParam['shape'],
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.none,
    borderRadius: params.nameParam['borderRadius'] ?? BorderRadius.zero,
    elevation: params.nameParam['elevation']?.toDouble(),
    color: params.nameParam['color'],
    animateColor: params.nameParam['animateColor'] ?? true,
    shadowColor: params.nameParam['shadowColor'],
    animateShadowColor: params.nameParam['animateShadowColor'] ?? true,
    curve: params.nameParam['curve'] ?? Curves.linear,
    duration: params.nameParam['duration'],
    onEnd: params.nameParam['onEnd'],
  ),
  'AnimatedPositioned': (Params params) => AnimatedPositioned(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    left: params.nameParam['left']?.toDouble(),
    top: params.nameParam['top']?.toDouble(),
    right: params.nameParam['right']?.toDouble(),
    bottom: params.nameParam['bottom']?.toDouble(),
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    curve: params.nameParam['curve'] ?? Curves.linear,
    duration: params.nameParam['duration'],
    onEnd: params.nameParam['onEnd'],
  ),
  'AnimatedPositioned.fromRect': (Params params) => AnimatedPositioned.fromRect(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    rect: params.nameParam['rect'],
    curve: params.nameParam['curve'] ?? Curves.linear,
    duration: params.nameParam['duration'],
    onEnd: params.nameParam['onEnd'],
  ),
  'AnimatedPositionedDirectional': (Params params) => AnimatedPositionedDirectional(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    start: params.nameParam['start']?.toDouble(),
    top: params.nameParam['top']?.toDouble(),
    end: params.nameParam['end']?.toDouble(),
    bottom: params.nameParam['bottom']?.toDouble(),
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    curve: params.nameParam['curve'] ?? Curves.linear,
    duration: params.nameParam['duration'],
    onEnd: params.nameParam['onEnd'],
  ),
  'AnimatedCrossFade': (Params params) => AnimatedCrossFade(
    key: params.nameParam['key'],
    firstChild: params.nameParam['firstChild'],
    secondChild: params.nameParam['secondChild'],
    firstCurve: params.nameParam['firstCurve'] ?? Curves.linear,
    secondCurve: params.nameParam['secondCurve'] ?? Curves.linear,
    sizeCurve: params.nameParam['sizeCurve'] ?? Curves.linear,
    alignment: params.nameParam['alignment'] ?? Alignment.topCenter,
    crossFadeState: params.nameParam['crossFadeState'],
    duration: params.nameParam['duration'],
    reverseDuration: params.nameParam['reverseDuration'],
  ),
  'AnimatedList': (Params params) => AnimatedList(
    key: params.nameParam['key'],
    itemBuilder: params.nameParam['itemBuilder'],
    initialItemCount: params.nameParam['initialItemCount'] ?? 0,
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    shrinkWrap: params.nameParam['shrinkWrap'] ?? false,
    padding: params.nameParam['padding'],
  ),
  'AnimatedListState': (Params params) => AnimatedListState(),
  'SliverAnimatedList': (Params params) => SliverAnimatedList(
    key: params.nameParam['key'],
    itemBuilder: params.nameParam['itemBuilder'],
    initialItemCount: params.nameParam['initialItemCount'] ?? 0,
  ),
  'AnimatedModalBarrier': (Params params) => AnimatedModalBarrier(
    key: params.nameParam['key'],
    color: params.nameParam['color'],
    dismissible: params.nameParam['dismissible'] ?? true,
    semanticsLabel: params.nameParam['semanticsLabel'],
    barrierSemanticsDismissible: params.nameParam['barrierSemanticsDismissible'],
  ),
  'ModalBarrier': (Params params) => ModalBarrier(
    key: params.nameParam['key'],
    color: params.nameParam['color'],
    dismissible: params.nameParam['dismissible'] ?? true,
    semanticsLabel: params.nameParam['semanticsLabel'],
    barrierSemanticsDismissible:
    params.nameParam['barrierSemanticsDismissible'] ?? true,
  ),
  'AnimatedSize': (Params params) => AnimatedSize(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    curve: params.nameParam['curve'] ?? Curves.linear,
    duration: params.nameParam['duration'],
    reverseDuration: params.nameParam['reverseDuration'],
    vsync: params.nameParam['vsync'],
  ),
  'AnimatedSwitcher': (Params params) => AnimatedSwitcher(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    duration: params.nameParam['duration'],
    reverseDuration: params.nameParam['reverseDuration'],
    switchInCurve: params.nameParam['switchInCurve'] ?? Curves.linear,
    switchOutCurve: params.nameParam['switchOutCurve'] ?? Curves.linear,
    transitionBuilder: params.nameParam['transitionBuilder'] ??
        AnimatedSwitcher.defaultTransitionBuilder,
  ),
  'AutomaticKeepAlive': (Params params) => AutomaticKeepAlive(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),
  'Banner': (Params params) => Banner(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    message: params.nameParam['message'],
    textDirection: params.nameParam['textDirection'],
    location: params.nameParam['location'],
    layoutDirection: params.nameParam['layoutDirection'],
    color: params.nameParam['color'] ?? _kColor,
    textStyle: params.nameParam['textStyle'] ?? _kTextStyle,
  ),
  'CheckedModeBanner': (Params params) => CheckedModeBanner(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),

  'ColorFiltered': (Params params) => ColorFiltered(
    colorFilter: params.nameParam['colorFilter'],
    child: params.nameParam['child'],
    key: params.nameParam['key'],
  ),
  'FutureBuilder': (Params params) => FutureBuilder(
    key: params.nameParam['key'],
    future: params.nameParam['future'],
    initialData: params.nameParam['initialData'],
    builder: params.nameParam['builder'],
  ),
  'StreamBuilder': (Params params) => StreamBuilder(
    key: params.nameParam['key'],
    initialData: params.nameParam['initialData'],
    stream: params.nameParam['stream'],
    builder: params.nameParam['builder'],
  ),
  'Container': (Params params) => Container(
    key: params.nameParam['key'],
    alignment: params.nameParam['alignment'],
    padding: params.nameParam['padding'],
    color: params.nameParam['color'],
    decoration: params.nameParam['decoration'],
    foregroundDecoration: params.nameParam['foregroundDecoration'],
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    constraints: params.nameParam['constraints'],
    margin: params.nameParam['margin'],
    transform: params.nameParam['transform'],
    child: params.nameParam['child'],
  ),
  'DecoratedBox': (Params params) => DecoratedBox(
    key: params.nameParam['key'],
    decoration: params.nameParam['decoration'],
    position: params.nameParam['position'] ?? DecorationPosition.background,
    child: params.nameParam['child'],
  ),
  'CustomScrollView': (Params params) => CustomScrollView(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    shrinkWrap: params.nameParam['shrinkWrap'] ?? false,
    center: params.nameParam['center'],
    anchor: params.nameParam['anchor']?.toDouble() ?? 0.0,
    cacheExtent: params.nameParam['cacheExtent']?.toDouble(),
    slivers: params.nameParam['slivers'] ?? const <Widget>[],
    semanticChildCount: params.nameParam['semanticChildCount'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'GridView': (Params params) => GridView(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    shrinkWrap: params.nameParam['shrinkWrap'] ?? false,
    padding: params.nameParam['padding'],
    gridDelegate: params.nameParam['gridDelegate'],
    addAutomaticKeepAlives: params.nameParam['addAutomaticKeepAlives'] ?? true,
    addRepaintBoundaries: params.nameParam['addRepaintBoundaries'] ?? true,
    addSemanticIndexes: params.nameParam['addSemanticIndexes'] ?? true,
    cacheExtent: params.nameParam['cacheExtent']?.toDouble(),
    children: params.nameParam['children'] ?? const <Widget>[],
    semanticChildCount: params.nameParam['semanticChildCount'],
  ),
  'GridView.builder': (Params params) => GridView.builder(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    shrinkWrap: params.nameParam['shrinkWrap'] ?? false,
    padding: params.nameParam['padding'],
    gridDelegate: params.nameParam['gridDelegate'],
    itemBuilder: params.nameParam['itemBuilder'],
    itemCount: params.nameParam['itemCount'],
    addAutomaticKeepAlives: params.nameParam['addAutomaticKeepAlives'] ?? true,
    addRepaintBoundaries: params.nameParam['addRepaintBoundaries'] ?? true,
    addSemanticIndexes: params.nameParam['addSemanticIndexes'] ?? true,
    cacheExtent: params.nameParam['cacheExtent']?.toDouble(),
    semanticChildCount: params.nameParam['semanticChildCount'],
  ),
  'GridView.custom': (Params params) => GridView.custom(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    shrinkWrap: params.nameParam['shrinkWrap'] ?? false,
    padding: params.nameParam['padding'],
    gridDelegate: params.nameParam['gridDelegate'],
    childrenDelegate: params.nameParam['childrenDelegate'],
    cacheExtent: params.nameParam['cacheExtent']?.toDouble(),
    semanticChildCount: params.nameParam['semanticChildCount'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'GridView.count': (Params params) => GridView.count(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    shrinkWrap: params.nameParam['shrinkWrap'] ?? false,
    padding: params.nameParam['padding'],
    crossAxisCount: params.nameParam['crossAxisCount'],
    mainAxisSpacing: params.nameParam['mainAxisSpacing']?.toDouble() ?? 0.0,
    crossAxisSpacing: params.nameParam['crossAxisSpacing']?.toDouble() ?? 0.0,
    childAspectRatio: params.nameParam['childAspectRatio']?.toDouble() ?? 1.0,
    addAutomaticKeepAlives: params.nameParam['addAutomaticKeepAlives'] ?? true,
    addRepaintBoundaries: params.nameParam['addRepaintBoundaries'] ?? true,
    addSemanticIndexes: params.nameParam['addSemanticIndexes'] ?? true,
    cacheExtent: params.nameParam['cacheExtent']?.toDouble(),
    children: params.nameParam['children'] ?? const <Widget>[],
    semanticChildCount: params.nameParam['semanticChildCount'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'GridView.extent': (Params params) => GridView.extent(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    shrinkWrap: params.nameParam['shrinkWrap'] ?? false,
    padding: params.nameParam['padding'],
    maxCrossAxisExtent: params.nameParam['maxCrossAxisExtent']?.toDouble(),
    mainAxisSpacing: params.nameParam['mainAxisSpacing']?.toDouble() ?? 0.0,
    crossAxisSpacing: params.nameParam['crossAxisSpacing']?.toDouble() ?? 0.0,
    childAspectRatio: params.nameParam['childAspectRatio']?.toDouble() ?? 1.0,
    addAutomaticKeepAlives: params.nameParam['addAutomaticKeepAlives'] ?? true,
    addRepaintBoundaries: params.nameParam['addRepaintBoundaries'] ?? true,
    addSemanticIndexes: params.nameParam['addSemanticIndexes'] ?? true,
    children: params.nameParam['children'] ?? const <Widget>[],
    semanticChildCount: params.nameParam['semanticChildCount'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'ListView': (Params params) => ListView(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    shrinkWrap: params.nameParam['shrinkWrap'] ?? false,
    padding: params.nameParam['padding'],
    itemExtent: params.nameParam['itemExtent']?.toDouble(),
    addAutomaticKeepAlives: params.nameParam['addAutomaticKeepAlives'] ?? true,
    addRepaintBoundaries: params.nameParam['addRepaintBoundaries'] ?? true,
    addSemanticIndexes: params.nameParam['addSemanticIndexes'] ?? true,
    cacheExtent: params.nameParam['cacheExtent']?.toDouble(),
    children: params.nameParam['children'] ?? const <Widget>[],
    semanticChildCount: params.nameParam['semanticChildCount'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'ListView.builder': (Params params) => ListView.builder(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    shrinkWrap: params.nameParam['shrinkWrap'] ?? false,
    padding: params.nameParam['padding'],
    itemExtent: params.nameParam['itemExtent']?.toDouble(),
    itemBuilder: params.nameParam['itemBuilder'],
    itemCount: params.nameParam['itemCount'],
    addAutomaticKeepAlives: params.nameParam['addAutomaticKeepAlives'] ?? true,
    addRepaintBoundaries: params.nameParam['addRepaintBoundaries'] ?? true,
    addSemanticIndexes: params.nameParam['addSemanticIndexes'] ?? true,
    cacheExtent: params.nameParam['cacheExtent']?.toDouble(),
    semanticChildCount: params.nameParam['semanticChildCount'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'ListView.separated': (Params params) => ListView.separated(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    shrinkWrap: params.nameParam['shrinkWrap'] ?? false,
    padding: params.nameParam['padding'],
    itemBuilder: params.nameParam['itemBuilder'],
    separatorBuilder: params.nameParam['separatorBuilder'],
    itemCount: params.nameParam['itemCount'],
    addAutomaticKeepAlives: params.nameParam['addAutomaticKeepAlives'] ?? true,
    addRepaintBoundaries: params.nameParam['addRepaintBoundaries'] ?? true,
    addSemanticIndexes: params.nameParam['addSemanticIndexes'] ?? true,
    cacheExtent: params.nameParam['cacheExtent']?.toDouble(),
  ),
  'ListView.custom': (Params params) => ListView.custom(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    shrinkWrap: params.nameParam['shrinkWrap'] ?? false,
    padding: params.nameParam['padding'],
    itemExtent: params.nameParam['itemExtent']?.toDouble(),
    childrenDelegate: params.nameParam['childrenDelegate'],
    cacheExtent: params.nameParam['cacheExtent']?.toDouble(),
    semanticChildCount: params.nameParam['semanticChildCount'],
  ),
  'DefaultTextStyle': (Params params) => DefaultTextStyle(
    key: params.nameParam['key'],
    style: params.nameParam['style'],
    textAlign: params.nameParam['textAlign'],
    softWrap: params.nameParam['softWrap'] ?? true,
    overflow: params.nameParam['overflow'] ?? TextOverflow.clip,
    maxLines: params.nameParam['maxLines'],
    textWidthBasis: params.nameParam['textWidthBasis'] ?? TextWidthBasis.parent,
    child: params.nameParam['child'],
  ),
  'DefaultTextStyle.fallback': (Params params) => DefaultTextStyle.fallback(),
  'Text': (Params params) => Text(
    params.posParam[0].toString(),
    key: params.nameParam['key'],
    style: params.nameParam['style'],
    strutStyle: params.nameParam['strutStyle'],
    textAlign: params.nameParam['textAlign'],
    textDirection: params.nameParam['textDirection'],
    locale: params.nameParam['locale'],
    softWrap: params.nameParam['softWrap'],
    overflow: params.nameParam['overflow'],
    textScaleFactor: params.nameParam['textScaleFactor']?.toDouble(),
    maxLines: params.nameParam['maxLines'],
    semanticsLabel: params.nameParam['semanticsLabel'],
    textWidthBasis: params.nameParam['textWidthBasis'],
  ),
  'Text.rich': (Params params) => Text.rich(
    params.posParam[0],
    key: params.nameParam['key'],
    style: params.nameParam['style'],
    strutStyle: params.nameParam['strutStyle'],
    textAlign: params.nameParam['textAlign'],
    textDirection: params.nameParam['textDirection'],
    locale: params.nameParam['locale'],
    softWrap: params.nameParam['softWrap'],
    overflow: params.nameParam['overflow'],
    textScaleFactor: params.nameParam['textScaleFactor']?.toDouble(),
    maxLines: params.nameParam['maxLines'],
    semanticsLabel: params.nameParam['semanticsLabel'],
    textWidthBasis: params.nameParam['textWidthBasis'],
  ),
  'Localizations': (Params params) => Localizations(
    key: params.nameParam['key'],
    locale: params.nameParam['locale'],
    delegates: as<LocalizationsDelegate>(params.nameParam['delegates']),
    child: params.nameParam['child'],
  ),
  'Localizations.override': (Params params) => Localizations.override(
    key: params.nameParam['key'],
    context: params.nameParam['context'],
    locale: params.nameParam['locale'],
    delegates: as<LocalizationsDelegate>(params.nameParam['delegates']),
    child: params.nameParam['child'],
  ),

  'Dismissible': (Params params) => Dismissible(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    background: params.nameParam['background'],
    secondaryBackground: params.nameParam['secondaryBackground'],
    confirmDismiss: params.nameParam['confirmDismiss'],
    onResize: params.nameParam['onResize'],
    onDismissed: params.nameParam['onDismissed'],
    direction: params.nameParam['direction'] ?? DismissDirection.horizontal,
    resizeDuration:
    params.nameParam['resizeDuration'] ?? const Duration(milliseconds: 300),
    dismissThresholds: params.nameParam['dismissThresholds'] ??
        const <DismissDirection, double>{},
    movementDuration:
    params.nameParam['movementDuration'] ?? const Duration(milliseconds: 200),
    crossAxisEndOffset: params.nameParam['crossAxisEndOffset']?.toDouble() ?? 0.0,
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'DragTarget': (Params params) => DragTarget(
    key: params.nameParam['key'],
    builder: params.nameParam['builder'],
    onWillAccept: params.nameParam['onWillAccept'],
    onAccept: params.nameParam['onAccept'],
    onLeave: params.nameParam['onLeave'],
  ),
  'Draggable': (Params params) => Draggable(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    feedback: params.nameParam['feedback'],
    data: params.nameParam['data'],
    axis: params.nameParam['axis'],
    childWhenDragging: params.nameParam['childWhenDragging'],
    feedbackOffset: params.nameParam['feedbackOffset'] ?? Offset.zero,
    dragAnchor: params.nameParam['dragAnchor'] ?? DragAnchor.child,
    affinity: params.nameParam['affinity'],
    maxSimultaneousDrags: params.nameParam['maxSimultaneousDrags'],
    onDragStarted: params.nameParam['onDragStarted'],
    onDraggableCanceled: params.nameParam['onDraggableCanceled'],
    onDragEnd: params.nameParam['onDragEnd'],
    onDragCompleted: params.nameParam['onDragCompleted'],
    ignoringFeedbackSemantics:
    params.nameParam['ignoringFeedbackSemantics'] ?? true,
  ),
  'LongPressDraggable': (Params params) => LongPressDraggable(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    feedback: params.nameParam['feedback'],
    data: params.nameParam['data'],
    axis: params.nameParam['axis'],
    childWhenDragging: params.nameParam['childWhenDragging'],
    feedbackOffset: params.nameParam['feedbackOffset'] ?? Offset.zero,
    dragAnchor: params.nameParam['dragAnchor'] ?? DragAnchor.child,
    maxSimultaneousDrags: params.nameParam['maxSimultaneousDrags'],
    onDragStarted: params.nameParam['onDragStarted'],
    onDraggableCanceled: params.nameParam['onDraggableCanceled'],
    onDragEnd: params.nameParam['onDragEnd'],
    onDragCompleted: params.nameParam['onDragCompleted'],
    hapticFeedbackOnStart: params.nameParam['hapticFeedbackOnStart'] ?? true,
    ignoringFeedbackSemantics:
    params.nameParam['ignoringFeedbackSemantics'] ?? true,
  ),
  'DraggableScrollableActuator': (Params params) => DraggableScrollableActuator(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),
  'DraggableScrollableSheet': (Params params) => DraggableScrollableSheet(
    key: params.nameParam['key'],
    initialChildSize: params.nameParam['initialChildSize']?.toDouble() ?? 0.5,
    minChildSize: params.nameParam['minChildSize']?.toDouble() ?? 0.25,
    maxChildSize: params.nameParam['maxChildSize']?.toDouble() ?? 1.0,
    expand: params.nameParam['expand'] ?? true,
    builder: params.nameParam['builder'],
  ),
  'EditableText': (Params params) => EditableText(
    key: params.nameParam['key'],
    controller: params.nameParam['controller'],
    focusNode: params.nameParam['focusNode'],
    readOnly: params.nameParam['readOnly'] ?? false,
    obscureText: params.nameParam['obscureText'] ?? false,
    autocorrect: params.nameParam['autocorrect'] ?? true,
    enableSuggestions: params.nameParam['enableSuggestions'] ?? true,
    style: params.nameParam['style'],
    strutStyle: params.nameParam['strutStyle'],
    cursorColor: params.nameParam['cursorColor'],
    backgroundCursorColor: params.nameParam['backgroundCursorColor'],
    textAlign: params.nameParam['textAlign'] ?? TextAlign.start,
    textDirection: params.nameParam['textDirection'],
    locale: params.nameParam['locale'],
    textScaleFactor: params.nameParam['textScaleFactor']?.toDouble(),
    maxLines: params.nameParam['maxLines'] ?? 1,
    minLines: params.nameParam['minLines'],
    expands: params.nameParam['expands'] ?? false,
    forceLine: params.nameParam['forceLine'] ?? true,
    textWidthBasis: params.nameParam['textWidthBasis'] ?? TextWidthBasis.parent,
    autofocus: params.nameParam['autofocus'] ?? false,
    showCursor: params.nameParam['showCursor'],
    showSelectionHandles: params.nameParam['showSelectionHandles'] ?? false,
    selectionColor: params.nameParam['selectionColor'],
    selectionControls: params.nameParam['selectionControls'],
    keyboardType: params.nameParam['keyboardType'],
    textInputAction: params.nameParam['textInputAction'],
    textCapitalization:
    params.nameParam['textCapitalization'] ?? TextCapitalization.none,
    onChanged: params.nameParam['onChanged'],
    onEditingComplete: params.nameParam['onEditingComplete'],
    onSubmitted: params.nameParam['onSubmitted'],
    onSelectionChanged: params.nameParam['onSelectionChanged'],
    onSelectionHandleTapped: params.nameParam['onSelectionHandleTapped'],
    inputFormatters: as<TextInputFormatter>(params.nameParam['inputFormatters']),
    rendererIgnoresPointer: params.nameParam['rendererIgnoresPointer'] ?? false,
    cursorWidth: params.nameParam['cursorWidth']?.toDouble() ?? 2.0,
    cursorRadius: params.nameParam['cursorRadius'],
    cursorOpacityAnimates: params.nameParam['cursorOpacityAnimates'] ?? false,
    cursorOffset: params.nameParam['cursorOffset'],
    paintCursorAboveText: params.nameParam['paintCursorAboveText'] ?? false,
    scrollPadding: params.nameParam['scrollPadding'] ?? const EdgeInsets.all(20.0),
    keyboardAppearance: params.nameParam['keyboardAppearance'] ?? Brightness.light,
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
    enableInteractiveSelection:
    params.nameParam['enableInteractiveSelection'] ?? true,
    scrollController: params.nameParam['scrollController'],
    scrollPhysics: params.nameParam['scrollPhysics'],
    toolbarOptions: params.nameParam['toolbarOptions'] ??
        const ToolbarOptions(
            copy: true, cut: true, paste: true, selectAll: true),
  ),
  'ErrorWidget': (Params params) => ErrorWidget(
    params.posParam[0],
  ),
  'ErrorWidget.withDetails': (Params params) => ErrorWidget.withDetails(
    message: params.nameParam['message'] ?? '',
    error: params.nameParam['error'],
  ),
  'FadeInImage': (Params params) => FadeInImage(
    key: params.nameParam['key'],
    placeholder: params.nameParam['placeholder'],
    image: params.nameParam['image'],
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    imageSemanticLabel: params.nameParam['imageSemanticLabel'],
    fadeOutDuration:
    params.nameParam['fadeOutDuration'] ?? const Duration(milliseconds: 300),
    fadeOutCurve: params.nameParam['fadeOutCurve'] ?? Curves.easeOut,
    fadeInDuration:
    params.nameParam['fadeInDuration'] ?? const Duration(milliseconds: 700),
    fadeInCurve: params.nameParam['fadeInCurve'] ?? Curves.easeIn,
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    fit: params.nameParam['fit'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    repeat: params.nameParam['repeat'] ?? ImageRepeat.noRepeat,
    matchTextDirection: params.nameParam['matchTextDirection'] ?? false,
  ),
  'FadeInImage.memoryNetwork': (Params params) => FadeInImage.memoryNetwork(
    key: params.nameParam['key'],
    placeholder: params.nameParam['placeholder'],
    image: params.nameParam['image'],
    placeholderScale: params.nameParam['placeholderScale']?.toDouble() ?? 1.0,
    imageScale: params.nameParam['imageScale']?.toDouble() ?? 1.0,
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    imageSemanticLabel: params.nameParam['imageSemanticLabel'],
    fadeOutDuration:
    params.nameParam['fadeOutDuration'] ?? const Duration(milliseconds: 300),
    fadeOutCurve: params.nameParam['fadeOutCurve'] ?? Curves.easeOut,
    fadeInDuration:
    params.nameParam['fadeInDuration'] ?? const Duration(milliseconds: 700),
    fadeInCurve: params.nameParam['fadeInCurve'] ?? Curves.easeIn,
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    fit: params.nameParam['fit'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    repeat: params.nameParam['repeat'] ?? ImageRepeat.noRepeat,
    matchTextDirection: params.nameParam['matchTextDirection'] ?? false,
    placeholderCacheWidth: params.nameParam['placeholderCacheWidth'],
    placeholderCacheHeight: params.nameParam['placeholderCacheHeight'],
    imageCacheWidth: params.nameParam['imageCacheWidth'],
    imageCacheHeight: params.nameParam['imageCacheHeight'],
  ),
  'FadeInImage.assetNetwork': (Params params) => FadeInImage.assetNetwork(
    key: params.nameParam['key'],
    placeholder: params.nameParam['placeholder'],
    image: params.nameParam['image'],
    bundle: params.nameParam['bundle'],
    placeholderScale: params.nameParam['placeholderScale']?.toDouble() ?? 1.0,
    imageScale: params.nameParam['imageScale']?.toDouble() ?? 1.0,
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    imageSemanticLabel: params.nameParam['imageSemanticLabel'],
    fadeOutDuration:
    params.nameParam['fadeOutDuration'] ?? const Duration(milliseconds: 300),
    fadeOutCurve: params.nameParam['fadeOutCurve'] ?? Curves.easeOut,
    fadeInDuration:
    params.nameParam['fadeInDuration'] ?? const Duration(milliseconds: 700),
    fadeInCurve: params.nameParam['fadeInCurve'] ?? Curves.easeIn,
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    fit: params.nameParam['fit'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    repeat: params.nameParam['repeat'] ?? ImageRepeat.noRepeat,
    matchTextDirection: params.nameParam['matchTextDirection'] ?? false,
    placeholderCacheWidth: params.nameParam['placeholderCacheWidth'],
    placeholderCacheHeight: params.nameParam['placeholderCacheHeight'],
    imageCacheWidth: params.nameParam['imageCacheWidth'],
    imageCacheHeight: params.nameParam['imageCacheHeight'],
  ),
  'Focus': (Params params) => Focus(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    onFocusChange: params.nameParam['onFocusChange'],
    onKey: params.nameParam['onKey'],
    debugLabel: params.nameParam['debugLabel'],
    canRequestFocus: params.nameParam['canRequestFocus'],
    skipTraversal: params.nameParam['skipTraversal'],
  ),
  'FocusScope': (Params params) => FocusScope(
    key: params.nameParam['key'],
    node: params.nameParam['node'],
    child: params.nameParam['child'],
    autofocus: params.nameParam['autofocus'] ?? false,
    onFocusChange: params.nameParam['onFocusChange'],
    canRequestFocus: params.nameParam['canRequestFocus'],
    skipTraversal: params.nameParam['skipTraversal'],
    onKey: params.nameParam['onKey'],
    debugLabel: params.nameParam['debugLabel'],
  ),
  'Form': (Params params) => Form(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    autovalidateMode: params.nameParam['autovalidateMode'] ?? AutovalidateMode.disabled,
    onWillPop: params.nameParam['onWillPop'],
    onChanged: params.nameParam['onChanged'],
  ),
  'FormField': (Params params) => FormField(
    key: params.nameParam['key'],
    builder: params.nameParam['builder'],
    onSaved: params.nameParam['onSaved'],
    validator: params.nameParam['validator'],
    initialValue: params.nameParam['initialValue'],
    autovalidateMode: params.nameParam['autovalidateMode'] ?? AutovalidateMode.disabled,
    enabled: params.nameParam['enabled'] ?? true,
  ),
  'GestureDetector': (Params params) => GestureDetector(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    onTapDown: params.nameParam['onTapDown'],
    onTapUp: params.nameParam['onTapUp'],
    onTap: params.nameParam['onTap'],
    onTapCancel: params.nameParam['onTapCancel'],
    onSecondaryTapDown: params.nameParam['onSecondaryTapDown'],
    onSecondaryTapUp: params.nameParam['onSecondaryTapUp'],
    onSecondaryTapCancel: params.nameParam['onSecondaryTapCancel'],
    onDoubleTap: params.nameParam['onDoubleTap'],
    onLongPress: params.nameParam['onLongPress'],
    onLongPressStart: params.nameParam['onLongPressStart'],
    onLongPressMoveUpdate: params.nameParam['onLongPressMoveUpdate'],
    onLongPressUp: params.nameParam['onLongPressUp'],
    onLongPressEnd: params.nameParam['onLongPressEnd'],
    onVerticalDragDown: params.nameParam['onVerticalDragDown'],
    onVerticalDragStart: params.nameParam['onVerticalDragStart'],
    onVerticalDragUpdate: params.nameParam['onVerticalDragUpdate'],
    onVerticalDragEnd: params.nameParam['onVerticalDragEnd'],
    onVerticalDragCancel: params.nameParam['onVerticalDragCancel'],
    onHorizontalDragDown: params.nameParam['onHorizontalDragDown'],
    onHorizontalDragStart: params.nameParam['onHorizontalDragStart'],
    onHorizontalDragUpdate: params.nameParam['onHorizontalDragUpdate'],
    onHorizontalDragEnd: params.nameParam['onHorizontalDragEnd'],
    onHorizontalDragCancel: params.nameParam['onHorizontalDragCancel'],
    onForcePressStart: params.nameParam['onForcePressStart'],
    onForcePressPeak: params.nameParam['onForcePressPeak'],
    onForcePressUpdate: params.nameParam['onForcePressUpdate'],
    onForcePressEnd: params.nameParam['onForcePressEnd'],
    onPanDown: params.nameParam['onPanDown'],
    onPanStart: params.nameParam['onPanStart'],
    onPanUpdate: params.nameParam['onPanUpdate'],
    onPanEnd: params.nameParam['onPanEnd'],
    onPanCancel: params.nameParam['onPanCancel'],
    onScaleStart: params.nameParam['onScaleStart'],
    onScaleUpdate: params.nameParam['onScaleUpdate'],
    onScaleEnd: params.nameParam['onScaleEnd'],
    behavior: params.nameParam['behavior'],
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'RawGestureDetector': (Params params) => RawGestureDetector(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    gestures:
    params.nameParam['gestures'] ?? const <Type, GestureRecognizerFactory>{},
    behavior: params.nameParam['behavior'],
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    semantics: params.nameParam['semantics'],
  ),
  'GlowingOverscrollIndicator': (Params params) => GlowingOverscrollIndicator(
    key: params.nameParam['key'],
    showLeading: params.nameParam['showLeading'] ?? true,
    showTrailing: params.nameParam['showTrailing'] ?? true,
    axisDirection: params.nameParam['axisDirection'],
    color: params.nameParam['color'],
    notificationPredicate: params.nameParam['notificationPredicate'] ??
        defaultScrollNotificationPredicate,
    child: params.nameParam['child'],
  ),
  'GridPaper': (Params params) => GridPaper(
    key: params.nameParam['key'],
    color: params.nameParam['color'] ?? const Color(0x7FC3E8F3),
    interval: params.nameParam['interval']?.toDouble() ?? 100.0,
    divisions: params.nameParam['divisions'] ?? 2,
    subdivisions: params.nameParam['subdivisions'] ?? 5,
    child: params.nameParam['child'],
  ),
  'Hero': (Params params) => Hero(
    key: params.nameParam['key'],
    tag: params.nameParam['tag'],
    createRectTween: params.nameParam['createRectTween'],
    flightShuttleBuilder: params.nameParam['flightShuttleBuilder'],
    placeholderBuilder: params.nameParam['placeholderBuilder'],
    transitionOnUserGestures:
    params.nameParam['transitionOnUserGestures'] ?? false,
    child: params.nameParam['child'],
  ),
  'Icon': (Params params) => Icon(
    params.posParam[0],
    key: params.nameParam['key'],
    size: params.nameParam['size']?.toDouble(),
    color: params.nameParam['color'],
    semanticLabel: params.nameParam['semanticLabel'],
    textDirection: params.nameParam['textDirection'],
  ),
  'IconTheme': (Params params) => IconTheme(
    key: params.nameParam['key'],
    data: params.nameParam['data'],
    child: params.nameParam['child'],
  ),
  'Image': (Params params) => Image(
    key: params.nameParam['key'],
    image: params.nameParam['image'],
    frameBuilder: params.nameParam['frameBuilder'],
    loadingBuilder: params.nameParam['loadingBuilder'],
    semanticLabel: params.nameParam['semanticLabel'],
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    color: params.nameParam['color'],
    colorBlendMode: params.nameParam['colorBlendMode'],
    fit: params.nameParam['fit'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    repeat: params.nameParam['repeat'] ?? ImageRepeat.noRepeat,
    centerSlice: params.nameParam['centerSlice'],
    matchTextDirection: params.nameParam['matchTextDirection'] ?? false,
    gaplessPlayback: params.nameParam['gaplessPlayback'] ?? false,
    filterQuality: params.nameParam['filterQuality'] ?? FilterQuality.low,
  ),
  'Image.network': (Params params) => Image.network(
    params.posParam[0],
    key: params.nameParam['key'],
    scale: params.nameParam['scale']?.toDouble() ?? 1.0,
    frameBuilder: params.nameParam['frameBuilder'],
    loadingBuilder: params.nameParam['loadingBuilder'],
    semanticLabel: params.nameParam['semanticLabel'],
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    color: params.nameParam['color'],
    colorBlendMode: params.nameParam['colorBlendMode'],
    fit: params.nameParam['fit'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    repeat: params.nameParam['repeat'] ?? ImageRepeat.noRepeat,
    centerSlice: params.nameParam['centerSlice'],
    matchTextDirection: params.nameParam['matchTextDirection'] ?? false,
    gaplessPlayback: params.nameParam['gaplessPlayback'] ?? false,
    filterQuality: params.nameParam['filterQuality'] ?? FilterQuality.low,
    headers: params.nameParam['headers'],
    cacheWidth: params.nameParam['cacheWidth'],
    cacheHeight: params.nameParam['cacheHeight'],
  ),
  'Image.file': (Params params) => Image.file(
    params.posParam[0],
    key: params.nameParam['key'],
    scale: params.nameParam['scale']?.toDouble() ?? 1.0,
    frameBuilder: params.nameParam['frameBuilder'],
    semanticLabel: params.nameParam['semanticLabel'],
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    color: params.nameParam['color'],
    colorBlendMode: params.nameParam['colorBlendMode'],
    fit: params.nameParam['fit'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    repeat: params.nameParam['repeat'] ?? ImageRepeat.noRepeat,
    centerSlice: params.nameParam['centerSlice'],
    matchTextDirection: params.nameParam['matchTextDirection'] ?? false,
    gaplessPlayback: params.nameParam['gaplessPlayback'] ?? false,
    filterQuality: params.nameParam['filterQuality'] ?? FilterQuality.low,
    cacheWidth: params.nameParam['cacheWidth'],
    cacheHeight: params.nameParam['cacheHeight'],
  ),
  'Image.asset': (Params params) => Image.asset(
    params.posParam[0],
    key: params.nameParam['key'],
    bundle: params.nameParam['bundle'],
    frameBuilder: params.nameParam['frameBuilder'],
    semanticLabel: params.nameParam['semanticLabel'],
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    scale: params.nameParam['scale']?.toDouble() ?? 1.0,
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    color: params.nameParam['color'],
    colorBlendMode: params.nameParam['colorBlendMode'],
    fit: params.nameParam['fit'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    repeat: params.nameParam['repeat'] ?? ImageRepeat.noRepeat,
    centerSlice: params.nameParam['centerSlice'],
    matchTextDirection: params.nameParam['matchTextDirection'] ?? false,
    gaplessPlayback: params.nameParam['gaplessPlayback'] ?? false,
    package: params.nameParam['package'],
    filterQuality: params.nameParam['filterQuality'] ?? FilterQuality.low,
    cacheWidth: params.nameParam['cacheWidth'],
    cacheHeight: params.nameParam['cacheHeight'],
  ),
  'Image.memory': (Params params) => Image.memory(
    params.posParam[0],
    key: params.nameParam['key'],
    scale: params.nameParam['scale']?.toDouble() ?? 1.0,
    frameBuilder: params.nameParam['frameBuilder'],
    semanticLabel: params.nameParam['semanticLabel'],
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    width: params.nameParam['width']?.toDouble(),
    height: params.nameParam['height']?.toDouble(),
    color: params.nameParam['color'],
    colorBlendMode: params.nameParam['colorBlendMode'],
    fit: params.nameParam['fit'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    repeat: params.nameParam['repeat'] ?? ImageRepeat.noRepeat,
    centerSlice: params.nameParam['centerSlice'],
    matchTextDirection: params.nameParam['matchTextDirection'] ?? false,
    gaplessPlayback: params.nameParam['gaplessPlayback'] ?? false,
    filterQuality: params.nameParam['filterQuality'] ?? FilterQuality.low,
    cacheWidth: params.nameParam['cacheWidth'],
    cacheHeight: params.nameParam['cacheHeight'],
  ),
  'ImageIcon': (Params params) => ImageIcon(
    params.posParam[0],
    key: params.nameParam['key'],
    size: params.nameParam['size']?.toDouble(),
    color: params.nameParam['color'],
    semanticLabel: params.nameParam['semanticLabel'],
  ),
  'KeepAlive': (Params params) => KeepAlive(
    key: params.nameParam['key'],
    keepAlive: params.nameParam['keepAlive'],
    child: params.nameParam['child'],
  ),
  'SliverChildBuilderDelegate': (Params params) => SliverChildBuilderDelegate(
    params.posParam[0],
    findChildIndexCallback: params.nameParam['findChildIndexCallback'],
    childCount: params.nameParam['childCount'],
    addAutomaticKeepAlives: params.nameParam['addAutomaticKeepAlives'] ?? true,
    addRepaintBoundaries: params.nameParam['addRepaintBoundaries'] ?? true,
    addSemanticIndexes: params.nameParam['addSemanticIndexes'] ?? true,
    semanticIndexCallback: params.nameParam['semanticIndexCallback'] ??
        _kDefaultSemanticIndexCallback,
    semanticIndexOffset: params.nameParam['semanticIndexOffset'] ?? 0,
  ),
  'SliverChildListDelegate': (Params params) => SliverChildListDelegate(
    params.posParam[0],
    addAutomaticKeepAlives: params.nameParam['addAutomaticKeepAlives'] ?? true,
    addRepaintBoundaries: params.nameParam['addRepaintBoundaries'] ?? true,
    addSemanticIndexes: params.nameParam['addSemanticIndexes'] ?? true,
    semanticIndexCallback: params.nameParam['semanticIndexCallback'] ??
        _kDefaultSemanticIndexCallback,
    semanticIndexOffset: params.nameParam['semanticIndexOffset'] ?? 0,
  ),
  'SliverChildListDelegate.fixed': (Params params) => SliverChildListDelegate.fixed(
    params.posParam[0],
    addAutomaticKeepAlives: params.nameParam['addAutomaticKeepAlives'] ?? true,
    addRepaintBoundaries: params.nameParam['addRepaintBoundaries'] ?? true,
    addSemanticIndexes: params.nameParam['addSemanticIndexes'] ?? true,
    semanticIndexCallback: params.nameParam['semanticIndexCallback'] ??
        _kDefaultSemanticIndexCallback,
    semanticIndexOffset: params.nameParam['semanticIndexOffset'] ?? 0,
  ),
  'SliverFillRemaining': (Params params) => SliverFillRemaining(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    hasScrollBody: params.nameParam['hasScrollBody'] ?? true,
    fillOverscroll: params.nameParam['fillOverscroll'] ?? false,
  ),
  'SliverFillViewport': (Params params) => SliverFillViewport(
    key: params.nameParam['key'],
    delegate: params.nameParam['delegate'],
    viewportFraction: params.nameParam['viewportFraction']?.toDouble() ?? 1.0,
  ),
  'SliverFixedExtentList': (Params params) => SliverFixedExtentList(
    key: params.nameParam['key'],
    delegate: params.nameParam['delegate'],
    itemExtent: params.nameParam['itemExtent']?.toDouble(),
  ),
  'SliverGrid': (Params params) => SliverGrid(
    key: params.nameParam['key'],
    delegate: params.nameParam['delegate'],
    gridDelegate: params.nameParam['gridDelegate'],
  ),
  'SliverGrid.count': (Params params) => SliverGrid.count(
    key: params.nameParam['key'],
    crossAxisCount: params.nameParam['crossAxisCount'],
    mainAxisSpacing: params.nameParam['mainAxisSpacing']?.toDouble() ?? 0.0,
    crossAxisSpacing: params.nameParam['crossAxisSpacing']?.toDouble() ?? 0.0,
    childAspectRatio: params.nameParam['childAspectRatio']?.toDouble() ?? 1.0,
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'SliverGrid.extent': (Params params) => SliverGrid.extent(
    key: params.nameParam['key'],
    maxCrossAxisExtent: params.nameParam['maxCrossAxisExtent']?.toDouble(),
    mainAxisSpacing: params.nameParam['mainAxisSpacing']?.toDouble() ?? 0.0,
    crossAxisSpacing: params.nameParam['crossAxisSpacing']?.toDouble() ?? 0.0,
    childAspectRatio: params.nameParam['childAspectRatio']?.toDouble() ?? 1.0,
    children: params.nameParam['children'] ?? const <Widget>[],
  ),
  'SliverIgnorePointer': (Params params) => SliverIgnorePointer(
    key: params.nameParam['key'],
    ignoring: params.nameParam['ignoring'] ?? true,
    ignoringSemantics: params.nameParam['ignoringSemantics'],
    sliver: params.nameParam['sliver'],
  ),
  'SliverList': (Params params) => SliverList(
    key: params.nameParam['key'],
    delegate: params.nameParam['delegate'],
  ),
  'SliverOpacity': (Params params) => SliverOpacity(
    key: params.nameParam['key'],
    opacity: params.nameParam['opacity']?.toDouble(),
    alwaysIncludeSemantics: params.nameParam['alwaysIncludeSemantics'] ?? false,
    sliver: params.nameParam['sliver'],
  ),
  'LayoutBuilder': (Params params) => LayoutBuilder(
    key: params.nameParam['key'],
    builder: params.nameParam['builder'],
  ),
  'ListWheelScrollView': (Params params) => ListWheelScrollView(
    key: params.nameParam['key'],
    controller: params.nameParam['controller'],
    physics: params.nameParam['physics'],
    diameterRatio: params.nameParam['diameterRatio']?.toDouble() ??
        RenderListWheelViewport.defaultDiameterRatio,
    perspective: params.nameParam['perspective']?.toDouble() ??
        RenderListWheelViewport.defaultPerspective,
    offAxisFraction: params.nameParam['offAxisFraction']?.toDouble() ?? 0.0,
    useMagnifier: params.nameParam['useMagnifier'] ?? false,
    magnification: params.nameParam['magnification']?.toDouble() ?? 1.0,
    itemExtent: params.nameParam['itemExtent']?.toDouble(),
    squeeze: params.nameParam['squeeze']?.toDouble() ?? 1.0,
    onSelectedItemChanged: params.nameParam['onSelectedItemChanged'],
    clipBehavior: params.nameParam['clipToSize'] ?? Clip.hardEdge,
    renderChildrenOutsideViewport:
    params.nameParam['renderChildrenOutsideViewport'] ?? false,
    children: as<Widget>(params.nameParam['children']),
  ),
  'ListWheelScrollView.useDelegate': (Params params) =>
      ListWheelScrollView.useDelegate(
        key: params.nameParam['key'],
        controller: params.nameParam['controller'],
        physics: params.nameParam['physics'],
        diameterRatio: params.nameParam['diameterRatio']?.toDouble() ??
            RenderListWheelViewport.defaultDiameterRatio,
        perspective: params.nameParam['perspective']?.toDouble() ??
            RenderListWheelViewport.defaultPerspective,
        offAxisFraction: params.nameParam['offAxisFraction']?.toDouble() ?? 0.0,
        useMagnifier: params.nameParam['useMagnifier'] ?? false,
        magnification: params.nameParam['magnification']?.toDouble() ?? 1.0,
        itemExtent: params.nameParam['itemExtent']?.toDouble(),
        squeeze: params.nameParam['squeeze']?.toDouble() ?? 1.0,
        onSelectedItemChanged: params.nameParam['onSelectedItemChanged'],
        clipBehavior: params.nameParam['clipBehavior'] ?? Clip.hardEdge,
        renderChildrenOutsideViewport:
        params.nameParam['renderChildrenOutsideViewport'] ?? false,
        childDelegate: params.nameParam['childDelegate'],
      ),
  'ListWheelViewport': (Params params) => ListWheelViewport(
    key: params.nameParam['key'],
    diameterRatio: params.nameParam['diameterRatio']?.toDouble() ??
        RenderListWheelViewport.defaultDiameterRatio,
    perspective: params.nameParam['perspective']?.toDouble() ??
        RenderListWheelViewport.defaultPerspective,
    offAxisFraction: params.nameParam['offAxisFraction']?.toDouble() ?? 0.0,
    useMagnifier: params.nameParam['useMagnifier'] ?? false,
    magnification: params.nameParam['magnification']?.toDouble() ?? 1.0,
    itemExtent: params.nameParam['itemExtent']?.toDouble(),
    squeeze: params.nameParam['squeeze']?.toDouble() ?? 1.0,
    clipBehavior: params.nameParam['clipBehavior'] ?? Clip.hardEdge,
    renderChildrenOutsideViewport:
    params.nameParam['renderChildrenOutsideViewport'] ?? false,
    offset: params.nameParam['offset'],
    childDelegate: params.nameParam['childDelegate'],
  ),
  'MediaQuery': (Params params) => MediaQuery(
    key: params.nameParam['key'],
    data: params.nameParam['data'],
    child: params.nameParam['child'],
  ),
  'MediaQuery.removePadding': (Params params) => MediaQuery.removePadding(
    key: params.nameParam['key'],
    context: params.nameParam['context'],
    removeLeft: params.nameParam['removeLeft'] ?? false,
    removeTop: params.nameParam['removeTop'] ?? false,
    removeRight: params.nameParam['removeRight'] ?? false,
    removeBottom: params.nameParam['removeBottom'] ?? false,
    child: params.nameParam['child'],
  ),
  'MediaQuery.removeViewInsets': (Params params) => MediaQuery.removeViewInsets(
    key: params.nameParam['key'],
    context: params.nameParam['context'],
    removeLeft: params.nameParam['removeLeft'] ?? false,
    removeTop: params.nameParam['removeTop'] ?? false,
    removeRight: params.nameParam['removeRight'] ?? false,
    removeBottom: params.nameParam['removeBottom'] ?? false,
    child: params.nameParam['child'],
  ),
  'MediaQuery.removeViewPadding': (Params params) => MediaQuery.removeViewPadding(
    key: params.nameParam['key'],
    context: params.nameParam['context'],
    removeLeft: params.nameParam['removeLeft'] ?? false,
    removeTop: params.nameParam['removeTop'] ?? false,
    removeRight: params.nameParam['removeRight'] ?? false,
    removeBottom: params.nameParam['removeBottom'] ?? false,
    child: params.nameParam['child'],
  ),
  'NavigationToolbar': (Params params) => NavigationToolbar(
    key: params.nameParam['key'],
    leading: params.nameParam['leading'],
    middle: params.nameParam['middle'],
    trailing: params.nameParam['trailing'],
    centerMiddle: params.nameParam['centerMiddle'] ?? true,
    middleSpacing: params.nameParam['middleSpacing']?.toDouble() ?? kMiddleSpacing,
  ),
  'Navigator': (Params params) => Navigator(
    key: params.nameParam['key'],
    initialRoute: params.nameParam['initialRoute'],
    onGenerateRoute: params.nameParam['onGenerateRoute'],
    onUnknownRoute: params.nameParam['onUnknownRoute'],
    observers: params.nameParam['observers'] ?? const <NavigatorObserver>[],
  ),
  'NestedScrollView': (Params params) => NestedScrollView(
    key: params.nameParam['key'],
    controller: params.nameParam['controller'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    physics: params.nameParam['physics'],
    headerSliverBuilder: params.nameParam['headerSliverBuilder'],
    body: params.nameParam['body'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'NestedScrollViewViewport': (Params params) => NestedScrollViewViewport(
    key: params.nameParam['key'],
    axisDirection: params.nameParam['axisDirection'] ?? AxisDirection.down,
    crossAxisDirection: params.nameParam['crossAxisDirection'],
    anchor: params.nameParam['anchor']?.toDouble() ?? 0.0,
    offset: params.nameParam['offset'],
    center: params.nameParam['center'],
    slivers: params.nameParam['slivers'] ?? const <Widget>[],
    handle: params.nameParam['handle'],
  ),
  'SliverOverlapAbsorber': (Params params) => SliverOverlapAbsorber(
    key: params.nameParam['key'],
    handle: params.nameParam['handle'],
    sliver: params.nameParam['sliver'],
  ),
  'SliverOverlapInjector': (Params params) => SliverOverlapInjector(
    key: params.nameParam['key'],
    handle: params.nameParam['handle'],
    sliver: params.nameParam['sliver'],
  ),
  'NotificationListener': (Params params) => NotificationListener(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    onNotification: params.nameParam['onNotification'],
  ),
  'OrientationBuilder': (Params params) => OrientationBuilder(
    key: params.nameParam['key'],
    builder: params.nameParam['builder'],
  ),
  'Overlay': (Params params) => Overlay(
    key: params.nameParam['key'],
    initialEntries: params.nameParam['initialEntries'] ?? const <OverlayEntry>[],
  ),
  'PageStorage': (Params params) => PageStorage(
    key: params.nameParam['key'],
    bucket: params.nameParam['bucket'],
    child: params.nameParam['child'],
  ),
  'PageView': (Params params) => PageView(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.horizontal,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    physics: params.nameParam['physics'],
    pageSnapping: params.nameParam['pageSnapping'] ?? true,
    onPageChanged: params.nameParam['onPageChanged'],
    children: params.nameParam['children'] ?? const <Widget>[],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'PageView.builder': (Params params) => PageView.builder(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.horizontal,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    physics: params.nameParam['physics'],
    pageSnapping: params.nameParam['pageSnapping'] ?? true,
    onPageChanged: params.nameParam['onPageChanged'],
    itemBuilder: params.nameParam['itemBuilder'],
    itemCount: params.nameParam['itemCount'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'PageView.custom': (Params params) => PageView.custom(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.horizontal,
    reverse: params.nameParam['reverse'] ?? false,
    controller: params.nameParam['controller'],
    physics: params.nameParam['physics'],
    pageSnapping: params.nameParam['pageSnapping'] ?? true,
    onPageChanged: params.nameParam['onPageChanged'],
    childrenDelegate: params.nameParam['childrenDelegate'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'Placeholder': (Params params) => Placeholder(
    key: params.nameParam['key'],
    color: params.nameParam['color'] ?? const Color(0xFF455A64),
    strokeWidth: params.nameParam['strokeWidth']?.toDouble() ?? 2.0,
    fallbackWidth: params.nameParam['fallbackWidth']?.toDouble() ?? 400.0,
    fallbackHeight: params.nameParam['fallbackHeight']?.toDouble() ?? 400.0,
  ),
  'PreferredSize': (Params params) => PreferredSize(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    preferredSize: params.nameParam['preferredSize'],
  ),
  'PrimaryScrollController': (Params params) => PrimaryScrollController(
    key: params.nameParam['key'],
    controller: params.nameParam['controller'],
    child: params.nameParam['child'],
  ),
  'PrimaryScrollController.none': (Params params) => PrimaryScrollController.none(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),
  'RawKeyboardListener': (Params params) => RawKeyboardListener(
    key: params.nameParam['key'],
    focusNode: params.nameParam['focusNode'],
    autofocus: params.nameParam['autofocus'] ?? false,
    onKey: params.nameParam['onKey'],
    child: params.nameParam['child'],
  ),
  'RenderObjectToWidgetAdapter': (Params params) => RenderObjectToWidgetAdapter(
    child: params.nameParam['child'],
    container: params.nameParam['container'],
    debugShortDescription: params.nameParam['debugShortDescription'],
  ),
  'SafeArea': (Params params) => SafeArea(
    key: params.nameParam['key'],
    left: params.nameParam['left'] ?? true,
    top: params.nameParam['top'] ?? true,
    right: params.nameParam['right'] ?? true,
    bottom: params.nameParam['bottom'] ?? true,
    minimum: params.nameParam['minimum'] ?? EdgeInsets.zero,
    maintainBottomViewPadding:
    params.nameParam['maintainBottomViewPadding'] ?? false,
    child: params.nameParam['child'],
  ),
  'SliverSafeArea': (Params params) => SliverSafeArea(
    key: params.nameParam['key'],
    left: params.nameParam['left'] ?? true,
    top: params.nameParam['top'] ?? true,
    right: params.nameParam['right'] ?? true,
    bottom: params.nameParam['bottom'] ?? true,
    minimum: params.nameParam['minimum'] ?? EdgeInsets.zero,
    sliver: params.nameParam['sliver'],
  ),
  'ScrollConfiguration': (Params params) => ScrollConfiguration(
    key: params.nameParam['key'],
    behavior: params.nameParam['behavior'],
    child: params.nameParam['child'],
  ),
  'Scrollable': (Params params) => Scrollable(
    key: params.nameParam['key'],
    axisDirection: params.nameParam['axisDirection'] ?? AxisDirection.down,
    controller: params.nameParam['controller'],
    physics: params.nameParam['physics'],
    viewportBuilder: params.nameParam['viewportBuilder'],
    excludeFromSemantics: params.nameParam['excludeFromSemantics'] ?? false,
    semanticChildCount: params.nameParam['semanticChildCount'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'SemanticsDebugger': (Params params) => SemanticsDebugger(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    labelStyle: params.nameParam['labelStyle'] ??
        const TextStyle(
            color: Color(0xFF000000), fontSize: 10.0, height: 0.8),
  ),
  'Shortcuts': (Params params) => Shortcuts(
    key: params.nameParam['key'],
    debugLabel: params.nameParam['debugLabel'],
    shortcuts: params.nameParam['shortcuts'],
    child: params.nameParam['child'],
  ),
  'ShrinkWrappingViewport': (Params params) => ShrinkWrappingViewport(
    key: params.nameParam['key'],
    axisDirection: params.nameParam['axisDirection'] ?? AxisDirection.down,
    crossAxisDirection: params.nameParam['crossAxisDirection'],
    offset: params.nameParam['offset'],
    slivers: params.nameParam['slivers'] ?? const <Widget>[],
  ),
  'Viewport': (Params params) => Viewport(
    key: params.nameParam['key'],
    axisDirection: params.nameParam['axisDirection'] ?? AxisDirection.down,
    crossAxisDirection: params.nameParam['crossAxisDirection'],
    anchor: params.nameParam['anchor']?.toDouble() ?? 0.0,
    offset: params.nameParam['offset'],
    center: params.nameParam['center'],
    cacheExtent: params.nameParam['cacheExtent']?.toDouble(),
    slivers: params.nameParam['slivers'] ?? const <Widget>[],
  ),
  'SingleChildScrollView': (Params params) => SingleChildScrollView(
    key: params.nameParam['key'],
    scrollDirection: params.nameParam['scrollDirection'] ?? Axis.vertical,
    reverse: params.nameParam['reverse'] ?? false,
    padding: params.nameParam['padding'],
    primary: params.nameParam['primary'],
    physics: params.nameParam['physics'],
    controller: params.nameParam['controller'],
    child: params.nameParam['child'],
    dragStartBehavior:
    params.nameParam['dragStartBehavior'] ?? DragStartBehavior.start,
  ),
  'SizeChangedLayoutNotifier': (Params params) => SizeChangedLayoutNotifier(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
  ),
  'SliverLayoutBuilder': (Params params) => SliverLayoutBuilder(
    key: params.nameParam['key'],
    builder: params.nameParam['builder'],
  ),
  'SliverPersistentHeader': (Params params) => SliverPersistentHeader(
    key: params.nameParam['key'],
    delegate: params.nameParam['delegate'],
    pinned: params.nameParam['pinned'] ?? false,
    floating: params.nameParam['floating'] ?? false,
  ),
  'SliverPrototypeExtentList': (Params params) => SliverPrototypeExtentList(
    key: params.nameParam['key'],
    delegate: params.nameParam['delegate'],
    prototypeItem: params.nameParam['prototypeItem'],
  ),
  'Spacer': (Params params) => Spacer(
    key: params.nameParam['key'],
    flex: params.nameParam['flex'] ?? 1,
  ),
  'Table': (Params params) => Table(
    key: params.nameParam['key'],
    children: params.nameParam['children'] ?? const <TableRow>[],
    columnWidths: params.nameParam['columnWidths'],
    defaultColumnWidth:
    params.nameParam['defaultColumnWidth'] ?? const FlexColumnWidth(1.0),
    textDirection: params.nameParam['textDirection'],
    border: params.nameParam['border'],
    defaultVerticalAlignment: params.nameParam['defaultVerticalAlignment'] ??
        TableCellVerticalAlignment.top,
    textBaseline: params.nameParam['textBaseline'],
  ),
  'TableCell': (Params params) => TableCell(
    key: params.nameParam['key'],
    verticalAlignment: params.nameParam['verticalAlignment'],
    child: params.nameParam['child'],
  ),
  'TextSelectionGestureDetector': (Params params) => TextSelectionGestureDetector(
    key: params.nameParam['key'],
    onTapDown: params.nameParam['onTapDown'],
    onForcePressStart: params.nameParam['onForcePressStart'],
    onForcePressEnd: params.nameParam['onForcePressEnd'],
    onSingleTapUp: params.nameParam['onSingleTapUp'],
    onSingleTapCancel: params.nameParam['onSingleTapCancel'],
    onSingleLongTapStart: params.nameParam['onSingleLongTapStart'],
    onSingleLongTapMoveUpdate: params.nameParam['onSingleLongTapMoveUpdate'],
    onSingleLongTapEnd: params.nameParam['onSingleLongTapEnd'],
    onDoubleTapDown: params.nameParam['onDoubleTapDown'],
    onDragSelectionStart: params.nameParam['onDragSelectionStart'],
    onDragSelectionUpdate: params.nameParam['onDragSelectionUpdate'],
    onDragSelectionEnd: params.nameParam['onDragSelectionEnd'],
    behavior: params.nameParam['behavior'],
    child: params.nameParam['child'],
  ),
  'Texture': (Params params) => Texture(
    key: params.nameParam['key'],
    textureId: params.nameParam['textureId'],
  ),
  'TickerMode': (Params params) => TickerMode(
    key: params.nameParam['key'],
    enabled: params.nameParam['enabled'],
    child: params.nameParam['child'],
  ),
  'Title': (Params params) => Title(
    key: params.nameParam['key'],
    title: params.nameParam['title'] ?? '',
    color: params.nameParam['color'],
    child: params.nameParam['child'],
  ),
  'TweenAnimationBuilder': (Params params) => TweenAnimationBuilder(
    key: params.nameParam['key'],
    tween: params.nameParam['tween'],
    duration: params.nameParam['duration'],
    curve: params.nameParam['curve'] ?? Curves.linear,
    builder: params.nameParam['builder'],
    onEnd: params.nameParam['onEnd'],
    child: params.nameParam['child'],
  ),
  'ValueListenableBuilder': (Params params) => ValueListenableBuilder(
    valueListenable: params.nameParam['valueListenable'],
    builder: params.nameParam['builder'],
    child: params.nameParam['child'],
  ),
  'Visibility': (Params params) => Visibility(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    replacement: params.nameParam['replacement'] ?? const SizedBox.shrink(),
    visible: params.nameParam['visible'] ?? true,
    maintainState: params.nameParam['maintainState'] ?? false,
    maintainAnimation: params.nameParam['maintainAnimation'] ?? false,
    maintainSize: params.nameParam['maintainSize'] ?? false,
    maintainSemantics: params.nameParam['maintainSemantics'] ?? false,
    maintainInteractivity: params.nameParam['maintainInteractivity'] ?? false,
  ),
  'WidgetsApp': (Params params) => WidgetsApp(
    key: params.nameParam['key'],
    navigatorKey: params.nameParam['navigatorKey'],
    onGenerateRoute: params.nameParam['onGenerateRoute'],
    onUnknownRoute: params.nameParam['onUnknownRoute'],
    navigatorObservers:
    params.nameParam['navigatorObservers'] ?? const <NavigatorObserver>[],
    initialRoute: params.nameParam['initialRoute'],
    pageRouteBuilder: params.nameParam['pageRouteBuilder'],
    home: params.nameParam['home'],
    routes: params.nameParam['routes'] ?? const <String, WidgetBuilder>{},
    builder: params.nameParam['builder'],
    title: params.nameParam['title'] ?? '',
    onGenerateTitle: params.nameParam['onGenerateTitle'],
    textStyle: params.nameParam['textStyle'],
    color: params.nameParam['color'],
    locale: params.nameParam['locale'],
    localizationsDelegates: params.nameParam['localizationsDelegates'],
    localeListResolutionCallback: params.nameParam['localeListResolutionCallback'],
    localeResolutionCallback: params.nameParam['localeResolutionCallback'],
    supportedLocales:
    params.nameParam['supportedLocales'] ?? const <Locale>[Locale('en', 'US')],
    showPerformanceOverlay: params.nameParam['showPerformanceOverlay'] ?? false,
    checkerboardRasterCacheImages:
    params.nameParam['checkerboardRasterCacheImages'] ?? false,
    checkerboardOffscreenLayers:
    params.nameParam['checkerboardOffscreenLayers'] ?? false,
    showSemanticsDebugger: params.nameParam['showSemanticsDebugger'] ?? false,
    debugShowWidgetInspector:
    params.nameParam['debugShowWidgetInspector'] ?? false,
    debugShowCheckedModeBanner:
    params.nameParam['debugShowCheckedModeBanner'] ?? true,
    inspectorSelectButtonBuilder: params.nameParam['inspectorSelectButtonBuilder'],
  ),
  'WillPopScope': (Params params) => WillPopScope(
    key: params.nameParam['key'],
    child: params.nameParam['child'],
    onWillPop: params.nameParam['onWillPop'],
  ),

  'Alignment': (Params params) => Alignment(
    params.posParam[0]?.toDouble(),
    params.posParam[1]?.toDouble(),
  ),
  'AssetImage': (Params params) => AssetImage(
    params.posParam[0],
    bundle: params.nameParam['bundle'],
    package: params.nameParam['package'],
  ),

  'Border': (Params params) => Border(
    top: params.nameParam['top'] ?? BorderSide.none,
    right: params.nameParam['right'] ?? BorderSide.none,
    bottom: params.nameParam['bottom'] ?? BorderSide.none,
    left: params.nameParam['left'] ?? BorderSide.none,
  ),
  'Border.fromBorderSide': (Params params) => Border.fromBorderSide(
    params.posParam[0],
  ),
  'Border.all': (Params params) => Border.all(
    color: params.nameParam['color'] ?? const Color(0xFF000000),
    width: params.nameParam['width']?.toDouble() ?? 1.0,
    style: params.nameParam['style'] ?? BorderStyle.solid,
  ),

  'BorderRadius.all': (Params params) => BorderRadius.all(
    params.posParam[0],
  ),
  'BorderRadius.circular': (Params params) => BorderRadius.circular(
    params.posParam[0]?.toDouble(),
  ),
  'BorderRadius.vertical': (Params params) => BorderRadius.vertical(
    top: params.nameParam['top'] ?? Radius.zero,
    bottom: params.nameParam['bottom'] ?? Radius.zero,
  ),
  'BorderRadius.horizontal': (Params params) => BorderRadius.horizontal(
    left: params.nameParam['left'] ?? Radius.zero,
    right: params.nameParam['right'] ?? Radius.zero,
  ),
  'BorderRadius.only': (Params params) => BorderRadius.only(
    topLeft: params.nameParam['topLeft'] ?? Radius.zero,
    topRight: params.nameParam['topRight'] ?? Radius.zero,
    bottomLeft: params.nameParam['bottomLeft'] ?? Radius.zero,
    bottomRight: params.nameParam['bottomRight'] ?? Radius.zero,
  ),
  'BorderRadiusDirectional.all': (Params params) => BorderRadiusDirectional.all(
    params.posParam[0],
  ),
  'BorderRadiusDirectional.circular': (Params params) =>
      BorderRadiusDirectional.circular(
        params.posParam[0]?.toDouble(),
      ),
  'BorderRadiusDirectional.vertical': (Params params) =>
      BorderRadiusDirectional.vertical(
        top: params.nameParam['top'] ?? Radius.zero,
        bottom: params.nameParam['bottom'] ?? Radius.zero,
      ),
  'BorderRadiusDirectional.horizontal': (Params params) =>
      BorderRadiusDirectional.horizontal(
        start: params.nameParam['start'] ?? Radius.zero,
        end: params.nameParam['end'] ?? Radius.zero,
      ),
  'BorderRadiusDirectional.only': (Params params) => BorderRadiusDirectional.only(
    topStart: params.nameParam['topStart'] ?? Radius.zero,
    topEnd: params.nameParam['topEnd'] ?? Radius.zero,
    bottomStart: params.nameParam['bottomStart'] ?? Radius.zero,
    bottomEnd: params.nameParam['bottomEnd'] ?? Radius.zero,
  ),

  'BoxDecoration': (Params params) => BoxDecoration(
    color: params.nameParam['color'],
    image: params.nameParam['image'],
    border: params.nameParam['border'],
    borderRadius: params.nameParam['borderRadius'],
    boxShadow: as<BoxShadow>(params.nameParam['boxShadow']),
    gradient: params.nameParam['gradient'],
    backgroundBlendMode: params.nameParam['backgroundBlendMode'],
    shape: params.nameParam['shape'] ?? BoxShape.rectangle,
  ),

  'BoxShadow': (Params params) => BoxShadow(
    color: params.nameParam['color'] ?? const Color(0xFF000000),
    offset: params.nameParam['offset'] ?? Offset.zero,
    blurRadius: params.nameParam['blurRadius']?.toDouble() ?? 0.0,
    spreadRadius: params.nameParam['spreadRadius']?.toDouble() ?? 0.0,
  ),
  'DecorationImage': (Params params) => DecorationImage(
    image: params.nameParam['image'],
    colorFilter: params.nameParam['colorFilter'],
    fit: params.nameParam['fit'],
    alignment: params.nameParam['alignment'] ?? Alignment.center,
    centerSlice: params.nameParam['centerSlice'],
    repeat: params.nameParam['repeat'] ?? ImageRepeat.noRepeat,
    matchTextDirection: params.nameParam['matchTextDirection'] ?? false,
  ),

  'EdgeInsets.fromLTRB': (Params params) => EdgeInsets.fromLTRB(
    params.posParam[0]?.toDouble(),
    params.posParam[1]?.toDouble(),
    params.posParam[2]?.toDouble(),
    params.posParam[3]?.toDouble(),
  ),
  'EdgeInsets.all': (Params params) => EdgeInsets.all(
    params.posParam[0]?.toDouble(),
  ),
  'EdgeInsets.only': (Params params) => EdgeInsets.only(
    left: params.nameParam['left']?.toDouble() ?? 0.0,
    top: params.nameParam['top']?.toDouble() ?? 0.0,
    right: params.nameParam['right']?.toDouble() ?? 0.0,
    bottom: params.nameParam['bottom']?.toDouble() ?? 0.0,
  ),
  'EdgeInsets.symmetric': (Params params) => EdgeInsets.symmetric(
    vertical: params.nameParam['vertical']?.toDouble() ?? 0.0,
    horizontal: params.nameParam['horizontal']?.toDouble() ?? 0.0,
  ),
  'EdgeInsets.fromWindowPadding': (Params params) => EdgeInsets.fromWindowPadding(
    params.posParam[0],
    params.posParam[1]?.toDouble(),
  ),

  'FractionalOffset': (Params params) => FractionalOffset(
    params.posParam[0]?.toDouble(),
    params.posParam[1]?.toDouble(),
  ),
  'FractionalOffset.fromOffsetAndSize': (Params params) =>
      FractionalOffset.fromOffsetAndSize(
        params.posParam[0],
        params.posParam[1],
      ),
  'FractionalOffset.fromOffsetAndRect': (Params params) =>
      FractionalOffset.fromOffsetAndRect(
        params.posParam[0],
        params.posParam[1],
      ),

  'LinearGradient': (Params params) => LinearGradient(
    begin: params.nameParam['begin'] ?? Alignment.centerLeft,
    end: params.nameParam['end'] ?? Alignment.centerRight,
    colors: as<Color>(params.nameParam['colors']),
    stops: as<double>(params.nameParam['stops']),
    tileMode: params.nameParam['tileMode'] ?? TileMode.clamp,
    transform: params.nameParam['transform'],
  ),
  'RadialGradient': (Params params) => RadialGradient(
    center: params.nameParam['center'] ?? Alignment.center,
    radius: params.nameParam['radius']?.toDouble() ?? 0.5,
    colors: as<Color>(params.nameParam['colors']),
    stops: as<double>(params.nameParam['stops']),
    tileMode: params.nameParam['tileMode'] ?? TileMode.clamp,
    focal: params.nameParam['focal'],
    focalRadius: params.nameParam['focalRadius']?.toDouble() ?? 0.0,
    transform: params.nameParam['transform'],
  ),
  'SweepGradient': (Params params) => SweepGradient(
    center: params.nameParam['center'] ?? Alignment.center,
    startAngle: params.nameParam['startAngle']?.toDouble() ?? 0.0,
    endAngle: params.nameParam['endAngle']?.toDouble() ?? pi * 2,
    colors: as<Color>(params.nameParam['colors']),
    stops: as<double>(params.nameParam['stops']),
    tileMode: params.nameParam['tileMode'] ?? TileMode.clamp,
    transform: params.nameParam['transform'],
  ),
  'NetworkImage': (Params params) => NetworkImage(
    params.posParam[0],
    scale: params.nameParam['scale']?.toDouble() ?? 1.0,
    headers: params.nameParam['headers'],
  ),

  'TextStyle': (Params params) => TextStyle(
    inherit: params.nameParam['inherit'] ?? true,
    color: params.nameParam['color'],
    backgroundColor: params.nameParam['backgroundColor'],
    fontSize: params.nameParam['fontSize']?.toDouble(),
    fontWeight: params.nameParam['fontWeight'],
    fontStyle: params.nameParam['fontStyle'],
    letterSpacing: params.nameParam['letterSpacing']?.toDouble(),
    wordSpacing: params.nameParam['wordSpacing']?.toDouble(),
    textBaseline: params.nameParam['textBaseline'],
    height: params.nameParam['height']?.toDouble(),
    locale: params.nameParam['locale'],
    foreground: params.nameParam['foreground'],
    background: params.nameParam['background'],
    shadows: as<Shadow>(params.nameParam['shadows']),
    fontFeatures: as<FontFeature>(params.nameParam['fontFeatures']),
    decoration: params.nameParam['decoration'],
    decorationColor: params.nameParam['decorationColor'],
    decorationStyle: params.nameParam['decorationStyle'],
    decorationThickness: params.nameParam['decorationThickness']?.toDouble(),
    debugLabel: params.nameParam['debugLabel'],
    fontFamily: params.nameParam['fontFamily'],
    fontFamilyFallback: as<String>(params.nameParam['fontFamilyFallback']),
    package: params.nameParam['package'],
  ),

  'Color': (Params params) {
    var color = params.posParam[0];
    return color is String ? Color(fromHex(color)) : Color(color);
  },

  'IconData':(Params params)  {
   var data = IconData(fromHex(params.posParam[0]), fontFamily: params.nameParam['fontFamily']);
  return data;
  }
};

class Params {
  var nameParam = {};
  var posParam = [];
}

List<T> as<T>(List? children) {
  if (children == null || children.isEmpty) {
    return <T>[];
  }
  return children.map((e) => e as T).toList();
}

