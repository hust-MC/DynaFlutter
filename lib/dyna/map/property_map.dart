
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';

var propertyMap = {
  'CrossAxisAlignment': {
    'values': CrossAxisAlignment.values,
    'start': CrossAxisAlignment.start,
    'end': CrossAxisAlignment.end,
    'center': CrossAxisAlignment.center,
    'stretch': CrossAxisAlignment.stretch,
    'baseline': CrossAxisAlignment.baseline,
  },
  'FlexFit': {
    'values': FlexFit.values,
    'tight': FlexFit.tight,
    'loose': FlexFit.loose,
  },
  'MainAxisAlignment': {
    'values': MainAxisAlignment.values,
    'start': MainAxisAlignment.start,
    'end': MainAxisAlignment.end,
    'center': MainAxisAlignment.center,
    'spaceBetween': MainAxisAlignment.spaceBetween,
    'spaceAround': MainAxisAlignment.spaceAround,
    'spaceEvenly': MainAxisAlignment.spaceEvenly,
  },
  'MainAxisSize': {
    'values': MainAxisSize.values,
    'min': MainAxisSize.min,
    'max': MainAxisSize.max,
  },
  'DecorationPosition': {
    'values': DecorationPosition.values,
    'background': DecorationPosition.background,
    'foreground': DecorationPosition.foreground,
  },
  'HitTestBehavior': {
    'values': HitTestBehavior.values,
    'deferToChild': HitTestBehavior.deferToChild,
    'opaque': HitTestBehavior.opaque,
    'translucent': HitTestBehavior.translucent,
  },
  'GrowthDirection': {
    'values': GrowthDirection.values,
    'forward': GrowthDirection.forward,
    'reverse': GrowthDirection.reverse,
  },
  'SliverGeometry': {
    'zero': SliverGeometry.zero,
  },
  'RelativeRect': {
    'fill': RelativeRect.fill,
  },
  'StackFit': {
    'values': StackFit.values,
    'loose': StackFit.loose,
    'expand': StackFit.expand,
    'passthrough': StackFit.passthrough,
  },
  'PlatformViewHitTestBehavior': {
    'values': PlatformViewHitTestBehavior.values,
    'opaque': PlatformViewHitTestBehavior.opaque,
    'translucent': PlatformViewHitTestBehavior.translucent,
    'transparent': PlatformViewHitTestBehavior.transparent,
  },
  'SelectionChangedCause': {
    'values': SelectionChangedCause.values,
    'tap': SelectionChangedCause.tap,
    'doubleTap': SelectionChangedCause.doubleTap,
    'longPress': SelectionChangedCause.longPress,
    'forcePress': SelectionChangedCause.forcePress,
    'keyboard': SelectionChangedCause.keyboard,
    'drag': SelectionChangedCause.drag,
  },
  'RenderErrorBox': {
    'padding': RenderErrorBox.padding,
    'minimumWidth': RenderErrorBox.minimumWidth,
    'backgroundColor': RenderErrorBox.backgroundColor,
    'textStyle': RenderErrorBox.textStyle,
    'paragraphStyle': RenderErrorBox.paragraphStyle,
  },
  'RenderViewport': {
    'useTwoPaneSemantics': RenderViewport.useTwoPaneSemantics,
    'excludeFromScrolling': RenderViewport.excludeFromScrolling,
  },
  'ScrollDirection': {
    'values': ScrollDirection.values,
    'idle': ScrollDirection.idle,
    'forward': ScrollDirection.forward,
    'reverse': ScrollDirection.reverse,
  },
  'TableCellVerticalAlignment': {
    'values': TableCellVerticalAlignment.values,
    'top': TableCellVerticalAlignment.top,
    'middle': TableCellVerticalAlignment.middle,
    'bottom': TableCellVerticalAlignment.bottom,
    'baseline': TableCellVerticalAlignment.baseline,
    'fill': TableCellVerticalAlignment.fill,
  },
  'TextOverflow': {
    'values': TextOverflow.values,
    'clip': TextOverflow.clip,
    'fade': TextOverflow.fade,
    'ellipsis': TextOverflow.ellipsis,
    'visible': TextOverflow.visible,
  },
  'WrapAlignment': {
    'values': WrapAlignment.values,
    'start': WrapAlignment.start,
    'end': WrapAlignment.end,
    'center': WrapAlignment.center,
    'spaceBetween': WrapAlignment.spaceBetween,
    'spaceAround': WrapAlignment.spaceAround,
    'spaceEvenly': WrapAlignment.spaceEvenly,
  },
  'WrapCrossAlignment': {
    'values': WrapCrossAlignment.values,
    'start': WrapCrossAlignment.start,
    'end': WrapCrossAlignment.end,
    'center': WrapCrossAlignment.center,
  },
  'Alignment.topLeft': Alignment.topLeft,
  'Alignment.topCenter': Alignment.topCenter,
  'Alignment.topRight': Alignment.topRight,
  'Alignment.centerLeft': Alignment.centerLeft,
  'Alignment.center': Alignment.center,
  'Alignment.centerRight': Alignment.centerRight,
  'Alignment.bottomLeft': Alignment.bottomLeft,
  'Alignment.bottomCenter': Alignment.bottomCenter,
  'Alignment.bottomRight': Alignment.bottomRight,
  'AlignmentDirectional': {
    'topStart': AlignmentDirectional.topStart,
    'topCenter': AlignmentDirectional.topCenter,
    'topEnd': AlignmentDirectional.topEnd,
    'centerStart': AlignmentDirectional.centerStart,
    'center': AlignmentDirectional.center,
    'centerEnd': AlignmentDirectional.centerEnd,
    'bottomStart': AlignmentDirectional.bottomStart,
    'bottomCenter': AlignmentDirectional.bottomCenter,
    'bottomEnd': AlignmentDirectional.bottomEnd,
  },
  'TextAlignVertical': {
    'top': TextAlignVertical.top,
    'center': TextAlignVertical.center,
    'bottom': TextAlignVertical.bottom,
  },
  'Axis': {
    'values': Axis.values,
    'horizontal': Axis.horizontal,
    'vertical': Axis.vertical,
  },
  'AxisDirection': {
    'values': AxisDirection.values,
    'up': AxisDirection.up,
    'right': AxisDirection.right,
    'down': AxisDirection.down,
    'left': AxisDirection.left,
  },
  'RenderComparison': {
    'values': RenderComparison.values,
    'identical': RenderComparison.identical,
    'metadata': RenderComparison.metadata,
    'paint': RenderComparison.paint,
    'layout': RenderComparison.layout,
  },
  'VerticalDirection': {
    'values': VerticalDirection.values,
    'up': VerticalDirection.up,
    'down': VerticalDirection.down,
  },
  'BoxShape': {
    'values': BoxShape.values,
    'rectangle': BoxShape.rectangle,
    'circle': BoxShape.circle,
  },
  'BorderRadiusDirectional.zero': BorderRadiusDirectional.zero,
  'BorderSide': {
    'none': BorderSide.none,
  },
  'BorderStyle': {
    'values': BorderStyle.values,
    'none': BorderStyle.none,
    'solid': BorderStyle.solid,
  },
  'BoxFit': {
    'values': BoxFit.values,
    'fill': BoxFit.fill,
    'contain': BoxFit.contain,
    'cover': BoxFit.cover,
    'fitWidth': BoxFit.fitWidth,
    'fitHeight': BoxFit.fitHeight,
    'none': BoxFit.none,
    'scaleDown': BoxFit.scaleDown,
  },
  'ImageRepeat': {
    'values': ImageRepeat.values,
    'repeat': ImageRepeat.repeat,
    'repeatX': ImageRepeat.repeatX,
    'repeatY': ImageRepeat.repeatY,
    'noRepeat': ImageRepeat.noRepeat,
  },
  'EdgeInsets.zero': EdgeInsets.zero,
  'EdgeInsetsDirectional': {
    'zero': EdgeInsetsDirectional.zero,
  },
  'FlutterLogoStyle': {
    'values': FlutterLogoStyle.values,
    'markOnly': FlutterLogoStyle.markOnly,
    'horizontal': FlutterLogoStyle.horizontal,
    'stacked': FlutterLogoStyle.stacked,
  },
  'FractionalOffset.topLeft': FractionalOffset.topLeft,
  'FractionalOffset.topCenter': FractionalOffset.topCenter,
  'FractionalOffset.topRight': FractionalOffset.topRight,
  'FractionalOffset.centerLeft': FractionalOffset.centerLeft,
  'FractionalOffset.center': FractionalOffset.center,
  'FractionalOffset.centerRight': FractionalOffset.centerRight,
  'FractionalOffset.bottomLeft': FractionalOffset.bottomLeft,
  'FractionalOffset.bottomCenter': FractionalOffset.bottomCenter,
  'FractionalOffset.bottomRight': FractionalOffset.bottomRight,
  'ImageConfiguration': {
    'empty': ImageConfiguration.empty,
  },
  'InlineSpanSemanticsInformation': {
    'placeholder': InlineSpanSemanticsInformation.placeholder,
  },
  'TextWidthBasis': {
    'values': TextWidthBasis.values,
    'parent': TextWidthBasis.parent,
    'longestLine': TextWidthBasis.longestLine,
  },
  'StrutStyle': {
    'disabled': StrutStyle.disabled,
  },
  'BorderRadius.zero': BorderRadius.zero,
};